// --- GAME CONSTANTS ---
const BASE_HEALTH = 100;
const ARENA_WIDTH = 1000;
const ARENA_HEIGHT = 700;
const FIGHTER_WIDTH = 70;
const FIGHTER_HEIGHT = 100;
const GAME_SPEED = 350; // –°–∫–æ—Ä–æ—Å—Ç—å —Ç–∏–∫–æ–≤ –∏–≥—Ä—ã
const PRE_ROUND_MANAGEMENT_DURATION = 5000;
const NEW_ROUND_DELAY_AFTER_MANAGEMENT = 1000;
const MAX_ARENA_BONUSES = 5;
const BONUS_PICKUP_RADIUS = 45;
const PROJECTILE_SPEED = 18;
const EXP_TO_LEVEL_UP_BASE = 100;
const EXP_TO_LEVEL_UP_FACTOR = 1.5;
const MAX_INTELLECT_LEVEL = 10;
const STALL_TIMEOUT = 20000;
const MIN_INITIAL_BONUSES_PER_ROUND = 1;
const MAX_INITIAL_BONUSES_PER_ROUND = 2;

// --- BONUS CHANCES & VALUES ---
const ELITE_WEAPON_BONUS_CHANCE = 0.0300;
const HEALTH_PACK_BONUS_CHANCE = 0.0300;
const ARMOR_PACK_LIGHT_CHANCE = 0.0200;
const ARMOR_PACK_HEAVY_CHANCE = 0.0100;
const MAX_ARMOR_HITS_LIGHT = 2;
const MAX_ARMOR_HITS_HEAVY = 4;


const INTELLECT_SYMBOLS = {
    tactical: 'üéØ', defense: 'üõ°Ô∏è', resource: 'üõ†Ô∏è', spatial: 'üó∫Ô∏è'
};

const EXPERIENCE_REWARDS = {
    kill: { tactical: 25, spatial: 10 },
    kill_major_boost: { tactical: 40, spatial: 15 },
    assist: { tactical: 10 },
    damage_dealt_ratio: { tactical: 30 },
    evade_attack: { defense: 15, spatial: 5 },
    block_attack: { defense: 20 },
    pickup_bonus: { resource: 25, spatial: 5 },
    survive_round_tick: { defense: 1, tactical: 0.5 },
    win_round: { tactical: 60, defense: 40, resource: 25, spatial: 25 },
    place_2nd: { tactical: 35, defense: 20, resource: 15, spatial: 15 },
    place_3rd: { tactical: 20, defense: 15, resource: 10, spatial: 10 },
    target_priority_success: { tactical: 10 },
    defeat_dangerous_enemy: { tactical: 30, defense: 10 },
    successful_retreat: { defense: 15, spatial: 10 },
    aoe_hit_multiple: { tactical: 5 },
    participation: { tactical: 3, defense: 3, resource: 2, spatial: 2 },
    first_blood: { tactical: 15, resource: 5},
    master_survival_seconds_threshold: 60,
    master_survival_reward: { defense: 20, spatial: 10 },
    bonus_collector_threshold: 3,
    bonus_collector_reward: { resource: 15, spatial: 5 },
    great_evader_threshold: 5,
    great_evader_reward: { defense: 25, spatial: 10 },
    leader_hunter_reward: { tactical: 35, resource: 10 },
};

// --- ECONOMIC CONSTANTS ---
const FIGHTER_STARTING_GOLD = 1000;
const ROUND_REWARDS_GOLD = {
    1: 1000,
    2: 500,
    3: 300
};
const MIN_BET_AMOUNT = 50;

// --- UPGRADES ---
const UPGRADES = {
    health: { id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", description: "+10 –∫ –º–∞–∫—Å. –û–ó", baseCost: 200, costIncrease: 100, maxLevel: null, effect: { type: "stat_add", statKey: "permanentStats.maxHealth", value: 10 } },
    attackSpeed: { id: "attackSpeed", name: "–°–∫–æ—Ä–æ—Å—Ç—å –ê—Ç–∞–∫–∏", description: "+5% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏", baseCost: 250, costIncrease: 150, maxLevel: null, effect: { type: "stat_multiply_inverse", statKey: "permanentStats.attackSpeedMultiplier", value: 0.05 } },
    critChance: { id: "critChance", name: "–®–∞–Ω—Å –ö—Ä–∏—Ç–∞", description: "+2% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç. —É–¥–∞—Ä–∞", baseCost: 300, costIncrease: 200, maxLevel: null, effect: { type: "stat_add", statKey: "permanentStats.critChanceBonus", value: 0.02 } },
    damage: { id: "damage", name: "–£—Ä–æ–Ω", description: "+5% –∫ –±–∞–∑–æ–≤–æ–º—É —É—Ä–æ–Ω—É", baseCost: 350, costIncrease: 200, maxLevel: null, effect: { type: "stat_multiply", statKey: "permanentStats.baseDamageMultiplier", value: 0.05 } },
    evasion: { id: "evasion", name: "–£–∫–ª–æ–Ω–µ–Ω–∏–µ", description: "+1% –∫ —à–∞–Ω—Å—É —É–∫–ª–æ–Ω–µ–Ω–∏—è", baseCost: 300, costIncrease: 150, maxLevel: null, effect: { type: "stat_add", statKey: "permanentStats.evasionBonus", value: 0.01 } },
    armor: { id: "armor", name: "–ë—Ä–æ–Ω—è", description: "+1 –∑–∞—Ä—è–¥ –±—Ä–æ–Ω–∏ –ø–µ—Ä–µ–¥ —Ä–∞—É–Ω–¥–æ–º", baseCost: 400, costIncrease: 250, maxLevel: null, effect: { type: "armor_charge", statKey: "permanentStats.bonusArmorChargesPerRound", value: 1 } },
    pickupRadius: { id: "pickupRadius", name: "–†–∞–¥–∏—É—Å –ü–æ–¥–±–æ—Ä–∞", description: "+15% –∫ —Ä–∞–¥–∏—É—Å—É –ø–æ–¥–±–æ—Ä–∞ –±–æ–Ω—É—Å–æ–≤", baseCost: 200, costIncrease: 100, maxLevel: null, effect: { type: "stat_multiply", statKey: "permanentStats.bonusPickupRadiusFactor", value: 0.15 } },
    expBoostTactical: { id: "expBoostTactical", name: "–û–±—É—á–µ–Ω–∏–µ: –¢–∞–∫—Ç–∏–∫–∞", description: "+20% —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞", baseCost: 500, costIncrease: 300, maxLevel: null, effect: { type: "exp_boost", intellectType: "tactical", statKey: "permanentStats.experienceGainMultiplier.tactical", value: 0.20 } },
    expBoostDefense: { id: "expBoostDefense", name: "–û–±—É—á–µ–Ω–∏–µ: –ó–∞—â–∏—Ç–∞", description: "+20% –∑–∞—â–∏—Ç–Ω–æ–≥–æ –æ–ø—ã—Ç–∞", baseCost: 500, costIncrease: 300, maxLevel: null, effect: { type: "exp_boost", intellectType: "defense", statKey: "permanentStats.experienceGainMultiplier.defense", value: 0.20 } },
    expBoostResource: { id: "expBoostResource", name: "–û–±—É—á–µ–Ω–∏–µ: –†–µ—Å—É—Ä—Å—ã", description: "+20% —Ä–µ—Å—É—Ä—Å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞", baseCost: 500, costIncrease: 300, maxLevel: null, effect: { type: "exp_boost", intellectType: "resource", statKey: "permanentStats.experienceGainMultiplier.resource", value: 0.20 } },
    expBoostSpatial: { id: "expBoostSpatial", name: "–û–±—É—á–µ–Ω–∏–µ: –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", description: "+20% –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞", baseCost: 500, costIncrease: 300, maxLevel: null, effect: { type: "exp_boost", intellectType: "spatial", statKey: "permanentStats.experienceGainMultiplier.spatial", value: 0.20 } },
    battleRage: { id: "battleRage", name: "–ë–æ–µ–≤–∞—è –Ø—Ä–æ—Å—Ç—å", description: "+15% —É—Ä–æ–Ω–∞, –∫–æ–≥–¥–∞ –û–ó < 30%", baseCost: 400, costIncrease: 250, maxLevel: null, effect: { type: "enrage_unlock", statKey: "permanentStats.enrageSettings", thresholdPercent: 0.3, damageBonus: 0.15 } },
    hunterInstinct: { id: "hunterInstinct", name: "–ò–Ω—Ç—É–∏—Ü–∏—è –û—Ö–æ—Ç–Ω–∏–∫–∞", description: "+3% —É—Ä–æ–Ω–∞ –ø–æ —Ü–µ–ª–∏ —Å –º–∞–∫—Å. –û–ó", baseCost: 350, costIncrease: 200, maxLevel: null, effect: { type: "hunter_instinct", statKey: "permanentStats.hunterInstinctDamageBonus", damageBonus: 0.03 } },
    battleAura: { id: "battleAura", name: "–ë–æ–µ–≤–∞—è –ê—É—Ä–∞", description: "–í—Ä–∞–≥–∏ –≤ —Ä–∞–¥–∏—É—Å–µ 100 –ø–æ–ª—É—á–∞—é—Ç +5% —É—Ä–æ–Ω–∞", baseCost: 500, costIncrease: 300, maxLevel: null, effect: { type: "battle_aura", statKey: "permanentStats.battleAura", radius: 100, damageIncreasePercent: 0.05 } },
    combatExperience: { id: "combatExperience", name: "–ë–æ–µ–≤–æ–π –û–ø—ã—Ç", description: "+10% –∫ –æ–ø—ã—Ç—É –∑–∞ —É–±–∏–π—Å—Ç–≤–∞", baseCost: 600, costIncrease: 400, maxLevel: null, effect: { type: "kill_exp_bonus", statKey: "permanentStats.bonusKillExpPercent", value: 0.10 } }
};

// --- DEBUFFS ---
const DEBUFFS = {
    poisonBlood: { id: "poisonBlood", name: "–û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ –ö—Ä–æ–≤–∏", description: "-2% –∫ –º–∞–∫—Å. –û–ó –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", baseCost: 400, costIncrease: 300, effect: { type: "stat_multiply", targetStatKey: "maxHealthModifierPercent", value: -0.02, applyMode: "multiply_total" } },
    deformWeapon: { id: "deformWeapon", name: "–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –û—Ä—É–∂–∏—è", description: "-1.5% –∫ –±–∞–∑–æ–≤–æ–º—É —É—Ä–æ–Ω—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", baseCost: 450, costIncrease: 350, effect: { type: "stat_multiply", targetStatKey: "baseDamageTakenDebuffMultiplier", value: -0.015, applyMode: "multiply_total" } },
    curseAccuracy: { id: "curseAccuracy", name: "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –¢–æ—á–Ω–æ—Å—Ç–∏", description: "-1% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç. —É–¥–∞—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", baseCost: 500, costIncrease: 400, effect: { type: "stat_add", targetStatKey: "critChanceTakenDebuffModifier", value: -0.01 } },
    maimMuscles: { id: "maimMuscles", name: "–£–≤–µ—á—å–µ –ú—ã—à—Ü", description: "-2% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", baseCost: 500, costIncrease: 400, effect: { type: "stat_multiply_inverse", targetStatKey: "attackSpeedTakenDebuffMultiplier", value: -0.02, applyMode: "multiply_total" } },
    coordViolation: { id: "coordViolation", name: "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏", description: "-0.5% –∫ —à–∞–Ω—Å—É —É–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", baseCost: 550, costIncrease: 450, effect: { type: "stat_add", targetStatKey: "evasionTakenDebuffModifier", value: -0.005 } },
    spoilArmor: { id: "spoilArmor", name: "–ü–æ—Ä—á–∞ –ë—Ä–æ–Ω–∏", description: "-1 –∫ –º–∞–∫—Å. –∑–∞—Ä—è–¥–∞–º –±—Ä–æ–Ω–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (min 0)", baseCost: 600, costIncrease: 500, effect: { type: "stat_add_capped", targetStatKey: "maxArmorChargesDebuff", value: -1, minValue: null } },
    shortSightedness: { id: "shortSightedness", name: "–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å", description: "-5% –∫ —Ä–∞–¥–∏—É—Å—É –ø–æ–¥–±–æ—Ä–∞ –±–æ–Ω—É—Å–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", baseCost: 400, costIncrease: 300, effect: { type: "stat_multiply", targetStatKey: "pickupRadiusTakenDebuffMultiplier", value: -0.05, applyMode: "multiply_total" } },
    forgetfulness: { id: "forgetfulness", name: "–ó–∞–±—ã–≤—á–∏–≤–æ—Å—Ç—å", description: "-5% –∫ –ø–æ–ª—É—á–∞–µ–º–æ–º—É –æ–ø—ã—Ç—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", baseCost: 650, costIncrease: 550, effect: { type: "stat_multiply", targetStatKey: "expGainTakenDebuffMultiplier", value: -0.05, applyMode: "multiply_total" } },
    bonusAllergy: { id: "bonusAllergy", name: "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –ë–æ–Ω—É—Å—ã", description: "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç 5 —É—Ä–æ–Ω–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –±–æ–Ω—É—Å–∞", baseCost: 450, costIncrease: 350, effect: { type: "damage_on_pickup", targetStatKey: "bonusDamageOnPickup", value: 5 } },
    tremorCurse: { id: "tremorCurse", name: "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –î—Ä–æ–∂–∏", description: "+5% —à–∞–Ω—Å –ø—Ä–æ–º–∞—Ö–∞ –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", baseCost: 500, costIncrease: 400, effect: { type: "stat_add", targetStatKey: "missChanceDebuff", value: 0.05 } },
    exhaustSupplies: { id: "exhaustSupplies", name: "–ò—Å—Ç–æ—â–µ–Ω–∏–µ –ó–∞–ø–∞—Å–æ–≤", description: "-10% –∫ –¥–ª–∏—Ç. –ø–æ–ª–æ–∂. –æ—Ä–±–∏—Ç. —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Ü–µ–ª–∏", baseCost: 420, costIncrease: 320, effect: { type: "stat_multiply", targetStatKey: "positiveEffectDurationModifier", value: -0.10, applyMode: "multiply_total" } }
};

// --- BET TYPES ---
const BET_TYPES = {
    win: { id: "win", name: "–ù–∞ –ø–æ–±–µ–¥—É (1-–µ –º–µ—Å—Ç–æ)", payoutMultiplier: 3, description: "–í—ã–ø–ª–∞—Ç–∞ x3. –°—Ç–∞–≤–∫–∞ —Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –∏—Å—Ö–æ–¥–µ."},
    second_place: { id: "second_place", name: "–ù–∞ 2-–µ –º–µ—Å—Ç–æ", payoutMultiplier: 1.5, description: "–í—ã–ø–ª–∞—Ç–∞ x1.5. –°—Ç–∞–≤–∫–∞ —Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –∏—Å—Ö–æ–¥–µ."},
    third_place: { id: "third_place", name: "–ù–∞ 3-–µ –º–µ—Å—Ç–æ", payoutMultiplier: 1.3, description: "–í—ã–ø–ª–∞—Ç–∞ x1.3. –°—Ç–∞–≤–∫–∞ —Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –∏—Å—Ö–æ–¥–µ."},
    survival: { id: "survival", name: "–ù–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ", payoutMultiplier: 1.5, description: "–í—ã–ø–ª–∞—Ç–∞ x1.5, –µ—Å–ª–∏ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∂–∏–≤ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –º–µ—Å—Ç–∞)."},
    kills_1: { id: "kills_1", name: "–ù–∞ 1+ —É–±–∏–π—Å—Ç–≤–æ", payoutMultiplier: 1.2, perKillMultiplier: 0.5, baseKills: 1, description: "x1.2 + x0.5 –∑–∞ –∫–∞–∂–¥–æ–µ —É–±–∏–π—Å—Ç–≤–æ —Å–≤–µ—Ä—Ö 1."},
    kills_3: { id: "kills_3", name: "–ù–∞ 3+ —É–±–∏–π—Å—Ç–≤–∞", payoutMultiplier: 2, perKillMultiplier: 0.7, baseKills: 3, description: "x2 + x0.7 –∑–∞ –∫–∞–∂–¥–æ–µ —É–±–∏–π—Å—Ç–≤–æ —Å–≤–µ—Ä—Ö 3."},
    risky_win_domination: { id: "risky_win_domination", name: "–†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞ (–î–æ–º–∏–Ω–∞—Ü–∏—è)", payoutMultiplier: 5, healthThreshold: 0.75, description: "–í—ã–ø–ª–∞—Ç–∞ x5 –∑–∞ –ø–æ–±–µ–¥—É —Å >75% –û–ó. –°—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–∞–µ—Ç –ø—Ä–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –∏—Å—Ö–æ–¥–µ."}
};

// --- SPECIAL ACTIONS (–Ω–∞ 1 —Ä–∞—É–Ω–¥) ---
const SPECIAL_ACTIONS = {
    exchangeExpForGold: { id: "exchangeExpForGold", name: "–û–±–º–µ–Ω –û–ø—ã—Ç–∞ –Ω–∞ –ó–æ–ª–æ—Ç–æ", description: "–ü–æ–Ω–∏–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å (min 1) –≤ –æ–±–º–µ–Ω –Ω–∞ 300 –∑–æ–ª–æ—Ç–∞.", cost: 0, effect: { type: "exp_to_gold", goldAmount: 300, intellectPoints: 1 } },
    inspire: { id: "inspire", name: "–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ", description: "+5% –∫ —à–∞–Ω—Å—É –±–ª–æ–∫–∞/—É–∫–ª–æ–Ω–µ–Ω–∏—è –≤ —Å–ª–µ–¥. —Ä–∞—É–Ω–¥–µ.", baseCost: 200, costIncrease: 100, effect: { type: "temp_inspiration", bonusChance: 0.05 } },
    investWeapon: { id: "investWeapon", name: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –û—Ä—É–∂–∏–µ", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —ç–ª–∏—Ç–Ω–æ–µ –æ—Ä—É–∂–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥. —Ä–∞—É–Ω–¥–æ–º.", baseCost: 800, costIncrease: 500, effect: { type: "temp_elite_weapon" } },
    regenerate: { id: "regenerate", name: "–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", description: "–í–æ—Å—Å—Ç. 1 –û–ó –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫. –≤ —Å–ª–µ–¥. —Ä–∞—É–Ω–¥–µ.", baseCost: 300, costIncrease: 200, effect: { type: "temp_regen", healthPerTick: 1, tickIntervalSeconds: 2 } }
};

// --- ECONOMIC UPGRADES (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ) ---
const ECONOMIC_UPGRADES = {
    passiveIncome: { id: "passiveIncome", name: "–ü–∞—Å—Å–∏–≤–Ω—ã–π –î–æ—Ö–æ–¥", description: "+50 –∑–æ–ª–æ—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞.", baseCost: 500, costIncrease: 300, effect: { type: "passive_gold", amount: 50 } },
    taxOptimization: { id: "taxOptimization", name: "–ù–∞–ª–æ–≥–æ–≤–∞—è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", description: "-10% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –∏ –¥–µ–±–∞—Ñ—Ñ–æ–≤ (–¥–æ 3 —Ä–∞–∑).", cost: 1000, maxLevel: 3, effect: { type: "cost_reduction_all", percent: 0.10 } },
    godsOffering: { id: "godsOffering", name: "–ü–æ–¥–Ω–æ—à–µ–Ω–∏–µ –ë–æ–∂–µ—Å—Ç–≤–∞–º", description: "–°–ª—É—á–∞–π–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –±–∞—Ñ—Ñ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥.", cost: 1000, effect: { type: "random_powerful_buff_next_round" } }
};

// --- ECONOMIC PACTS (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏) ---
const ECONOMIC_PACTS = {
    bloodPact: { id: "bloodPact", name: "–ö—Ä–æ–≤–∞–≤—ã–π –ü–∞–∫—Ç (+–ü—Ä–∏–∑, -–û–ó)", description: "+20% –∫ –ø—Ä–∏–∑–æ–≤—ã–º, –Ω–æ -10% –∫ –º–∞–∫—Å. –û–ó (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ).", cost: 0, oneTime: true, effect: { prizeBonusPercent: 0.20, maxHealthModifierPercent: -0.10 } },
    miserPact: { id: "miserPact", name: "–ü–∞–∫—Ç –°–∫—É–ø–æ—Å—Ç–∏ (–ó–∞–º–æ—Ä–æ–∑–∫–∞ + –ë–æ–Ω—É—Å)", description: "–ù–µ–ª—å–∑—è —Ç—Ä–∞—Ç–∏—Ç—å –∑–æ–ª–æ—Ç–æ 3 —Ä–∞—É–Ω–¥–∞, –∑–∞—Ç–µ–º +50% –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Å—É–º–º–µ.", cost: 0, durationRounds: 3, effect: { type: "gold_freeze_bonus", bonusPercent: 0.50 } }
};

// --- ACHIEVEMENTS (–Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–∞—É–Ω–¥) ---
const ACHIEVEMENTS_ROUND = {
    firstBlood: { id: "firstBlood", name: "–ü–µ—Ä–≤–∞—è –ö—Ä–æ–≤—å", condition: (fighter) => fighter.achievementsTrackers.killsThisRound > 0 && roundGlobalAchievements.firstBlood === undefined, reward: { type: "gold", amount: 100 }, oneTimePerRoundGlobal: true },
    masterSurvivor: { id: "masterSurvivor", name: "–ú–∞—Å—Ç–µ—Ä –í—ã–∂–∏–≤–∞–Ω–∏—è", condition: (fighter) => fighter.achievementsTrackers.timeSurvivedThisRound >= EXPERIENCE_REWARDS.master_survival_seconds_threshold, reward: { type: "gold", amount: 150 } },
    bonusCollector: { id: "bonusCollector", name: "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ë–æ–Ω—É—Å–æ–≤", condition: (fighter) => fighter.achievementsTrackers.bonusesCollectedThisRound >= EXPERIENCE_REWARDS.bonus_collector_threshold, reward: { type: "gold", amount: 50 } },
    greatEvader: { id: "greatEvader", name: "–í–µ–ª–∏–∫–∏–π –£–∫–ª–æ–Ω–∏—Å—Ç", condition: (fighter) => fighter.achievementsTrackers.successfulEvasionsThisRound >= EXPERIENCE_REWARDS.great_evader_threshold, reward: { type: "gold", amount: 75 } },
    leaderHunter: { id: "leaderHunter", name: "–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞ –õ–∏–¥–µ—Ä–æ–≤", condition: (fighter, leaderId) => fighter.achievementsTrackers.killedTargetIds && fighter.achievementsTrackers.killedTargetIds.includes(leaderId) && leaderId !== null && fighter.id !== leaderId, reward: { type: "gold", amount: 200 } },
    stylistKill: { id: "stylistKill", name: "–°—Ç–∏–ª–∏—Å—Ç", condition: (fighter) => fighter.achievementsTrackers.critKills > 0, reward: { type: "gold", amount: 50 } },
    flawlessVictory: { id: "flawlessVictory", name: "–ù–µ—É—è–∑–≤–∏–º—ã–π", condition: (fighter) => fighter.alive && fighter.achievementsTrackers.damageTakenThisRound === 0 && fighter.achievementsTrackers.winsThisRound > 0, reward: { type: "gold", amount: 200 } },
    closeCallVictory: { id: "closeCallVictory", name: "–ù–∞ –ì—Ä–∞–Ω–∏", condition: (fighter, baseHealth) => fighter.alive && fighter.health < baseHealth * 0.1 && fighter.achievementsTrackers.winsThisRound > 0, reward: { type: "gold", amount: 100 } },
    duelMaster: { id: "duelMaster", name: "–ú–∞—Å—Ç–µ—Ä –î—É—ç–ª–∏", condition: (fighter) => fighter.achievementsTrackers.wonDuel, reward: { type: "gold", amount: 150 } }
};

// --- TITLES (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞ 1 —Ä–∞—É–Ω–¥) ---
const TITLES = {
    champion: { id: "champion", name: "–ß–µ–º–ø–∏–æ–Ω", description: "+5% –∫–æ –≤—Å–µ–º —Å—Ç–∞—Ç–∞–º, –Ω–æ -50% –∫ –ø—Ä–∏–∑–æ–≤—ã–º.", durationRounds: 1, condition: (fighter) => fighter.winStreak >= 3, effects: { allStatsMultiplier: 1.05, prizeGoldMultiplier: 0.5 } },
    luckyOne: { id: "luckyOne", name: "–í–µ–∑—É–Ω—á–∏–∫", description: "+10% –∫ —à–∞–Ω—Å—É —É–∫–ª–æ–Ω–µ–Ω–∏—è.", durationRounds: 1, condition: (fighter) => fighter.achievementsTrackers.successfulEvasionsThisRound >= 5, effects: { evasionBonusAdd: 0.10 } },
    killer: { id: "killer", name: "–£–±–∏–π—Ü–∞", description: "+10% –∫ —É—Ä–æ–Ω—É –æ—Ä—É–∂–∏—è.", durationRounds: 1, condition: (fighter) => fighter.achievementsTrackers.killsThisRound >= 3, effects: { damageMultiplierAdd: 0.10 } },
    survivorPro: { id: "survivorPro", name: "–ñ–∏–≤—É—á–∏–π", description: "+15% –∫ –º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å—é.", durationRounds: 1, condition: (fighter, baseHealth) => fighter.achievementsTrackers.timeSurvivedThisRound >= 75 && fighter.health < baseHealth * 0.1, effects: { maxHealthMultiplierAdd: 0.15 } },
    collectorPro: { id: "collectorPro", name: "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä PRO", description: "+25% –∫ —Ä–∞–¥–∏—É—Å—É –ø–æ–¥–±–æ—Ä–∞.", durationRounds: 1, condition: (fighter) => fighter.achievementsTrackers.bonusesCollectedThisRound >= 5, effects: { pickupRadiusMultiplierAdd: 0.25 } }
};

// --- DYNAMIC BALANCE ---
const DYNAMIC_BALANCE = {
    richTaxPercent: 0.05,
    catchUpBonusEffectMultiplier: 1.10,
    badLuckCompensationGold: 200,
    badLuckStreakThreshold: 3,
    marketFluctuationPercent: 0.20,
    saleDiscountPercent: 0.30,
    highDemandPriceIncreasePercent: 0.25,
    diminishingReturnsThreshold: 5,
    diminishingReturnsFactor: 0.80,
    progressiveTaxThreshold1: 3,
    progressiveTaxPercent1: 0.10,
    progressiveTaxThreshold2: 5,
    progressiveTaxPercent2: 0.20,
};

// --- –û–†–£–ñ–ò–ï ---
const WEAPONS = [
    // Original 7
    { name: "–†–∂–∞–≤—ã–π –ú–µ—á", emoji: "‚öîÔ∏è", type: "melee", minDamage: 8, maxDamage: 12, range: 85, critChance: 0.05, speed: 1, effects: [] },
    { name: "–î—É–±–∏–Ω–∞", emoji: "üèè", type: "melee", minDamage: 10, maxDamage: 15, range: 80, critChance: 0.02, speed: 0.9, effects: [{ type: 'stun', chance: 0.1, duration: 2 }] },
    { name: "–ö–æ—Ä–æ—Ç–∫–∏–π –õ—É–∫", emoji: "üèπ", type: "ranged", minDamage: 7, maxDamage: 10, range: 420, critChance: 0.08, speed: 1.1, projectile: "‚Üí", effects: [] },
    { name: "–ú–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –ù–æ–∂–∏", emoji: "üî™", type: "ranged", minDamage: 5, maxDamage: 8, range: 320, critChance: 0.1, speed: 1.2, projectile: "‚àó", effects: [{ type: 'poison', chance: 0.15, dps: 2, duration: 3 }] },
    { name: "–ë–æ–µ–≤–æ–π –¢–æ–ø–æ—Ä", emoji: "ü™ì", type: "melee", minDamage: 12, maxDamage: 18, range: 95, critChance: 0.1, speed: 0.8, effects: [] },
    { name: "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ü–æ—Å–æ—Ö", emoji: "ü™Ñ", type: "ranged", minDamage: 10, maxDamage: 14, range: 470, critChance: 0.05, speed: 1, projectile: "‚ú®", effects: [{ type: 'slow', chance: 0.2, factor: 0.5, duration: 2 }] },
    { name: "–¶–µ–ø", emoji: "‚õìÔ∏è", type: "melee", minDamage: 9, maxDamage: 13, range: 125, critChance: 0.07, speed: 0.95, effects: [{ type: 'aoe_melee', radius: 55, selfImmune: true }] },

    // Expanded list (original 53)
    { name: "–¢—è–∂–µ–ª—ã–π –ú–æ–ª–æ—Ç", emoji: "üî®", type: "melee", minDamage: 13, maxDamage: 20, range: 90, critChance: 0.03, speed: 0.75, effects: [{ type: 'stun', chance: 0.12, duration: 1 }] },
    { name: "–û—Å—Ç—Ä—ã–π –ö–∏–Ω–∂–∞–ª", emoji: "üó°Ô∏è", type: "melee", minDamage: 6, maxDamage: 10, range: 75, critChance: 0.12, speed: 1.15, effects: [{ type: 'poison', chance: 0.1, dps: 1, duration: 3 }] },
    { name: "–î–ª–∏–Ω–Ω—ã–π –õ—É–∫", emoji: "‚¨ÜÔ∏è", type: "ranged", minDamage: 9, maxDamage: 14, range: 480, critChance: 0.07, speed: 1.0, projectile: "‚û¢", effects: [] },
    { name: "–õ–µ–≥–∫–∏–π –ê—Ä–±–∞–ª–µ—Ç", emoji: "üéØ", type: "ranged", minDamage: 10, maxDamage: 16, range: 450, critChance: 0.09, speed: 0.9, projectile: "‚áí", effects: [] },
    { name: "–ë–æ–µ–≤–æ–π –ü–æ—Å–æ—Ö", emoji: "üåø", type: "melee", minDamage: 9, maxDamage: 14, range: 100, critChance: 0.06, speed: 0.9, effects: [] },
    { name: "–ó–∞–∑—É–±—Ä–µ–Ω–Ω–∞—è –°–µ–∫–∏—Ä–∞", emoji: "ü©∏", type: "melee", minDamage: 14, maxDamage: 22, range: 92, critChance: 0.08, speed: 0.78, effects: [{ type: 'burn', chance: 0.05, dps: 2, duration: 2 }] },
    { name: "–ú–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–π –ú–æ–ª–æ—Ç", emoji: "üí®", type: "ranged", minDamage: 11, maxDamage: 17, range: 250, critChance: 0.04, speed: 0.85, projectile: "‡∏ò", effects: [{ type: 'stun', chance: 0.08, duration: 1 }] },
    { name: "–û—Ç—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –î—Ä–æ—Ç–∏–∫–∏", emoji: "üíß", type: "ranged", minDamage: 4, maxDamage: 7, range: 380, critChance: 0.05, speed: 1.25, projectile: "‚Ü¶", effects: [{ type: 'poison', chance: 0.25, dps: 3, duration: 3 }] },
    { name: "–ö–æ–ø—å–µ", emoji: "üî±", type: "melee", minDamage: 10, maxDamage: 16, range: 130, critChance: 0.07, speed: 0.95, effects: [] },
    { name: "–ü—Ä–∞—â–∞ —Å –ö–∞–º–Ω—è–º–∏", emoji: "üåÄ", type: "ranged", minDamage: 6, maxDamage: 11, range: 350, critChance: 0.03, speed: 1.05, projectile: "‚óè", effects: [] },
    { name: "–°—Ç–∞–ª—å–Ω–æ–π –ö–∞—Å—Ç–µ—Ç", emoji: "üëä", type: "melee", minDamage: 7, maxDamage: 11, range: 70, critChance: 0.09, speed: 1.1, effects: [] },
    { name: "–û–≥–Ω–µ–Ω–Ω—ã–π –ñ–µ–∑–ª", emoji: "üî•", type: "ranged", minDamage: 9, maxDamage: 15, range: 400, critChance: 0.06, speed: 0.95, projectile: "‚òÑÔ∏è", effects: [{ type: 'burn', chance: 0.2, dps: 3, duration: 2 }] },
    { name: "–õ–µ–¥—è–Ω–æ–π –ö–ª–∏–Ω–æ–∫", emoji: "‚ùÑÔ∏è", type: "melee", minDamage: 10, maxDamage: 15, range: 88, critChance: 0.05, speed: 0.98, effects: [{ type: 'slow', chance: 0.15, factor: 0.4, duration: 2 }] },
    { name: "–ü–∞—Ä–Ω—ã–µ –ö–∏–Ω–∂–∞–ª—ã", emoji: "üî™üî™", type: "melee", minDamage: 7, maxDamage: 10, range: 78, critChance: 0.15, speed: 1.2, effects: [] },
    { name: "–£—Ç—Ä–µ–Ω–Ω—è—è –ó–≤–µ–∑–¥–∞", emoji: "üåü", type: "melee", minDamage: 12, maxDamage: 19, range: 95, critChance: 0.04, speed: 0.82, effects: [{ type: 'stun', chance: 0.1, duration: 1 }] },
    { name: "–°—é—Ä–∏–∫–µ–Ω—ã", emoji: "‚≠ê", type: "ranged", minDamage: 3, maxDamage: 6, range: 300, critChance: 0.18, speed: 1.3, projectile: "‚ú¥", effects: [] },
    { name: "–î–≤—É—Ä—É—á–Ω—ã–π –ú–µ—á", emoji: "‚¨ÜÔ∏è‚öîÔ∏è", type: "melee", minDamage: 15, maxDamage: 25, range: 110, critChance: 0.07, speed: 0.7, effects: [] },
    { name: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –•–ª—ã—Å—Ç", emoji: "‚ö°", type: "melee", minDamage: 8, maxDamage: 13, range: 140, critChance: 0.08, speed: 1.0, effects: [{ type: 'slow', chance: 0.1, factor: 0.3, duration: 2 }, { type: 'stun', chance: 0.05, duration: 1 }] },
    { name: "–í–∑—Ä—ã–≤–Ω–æ–π –ë–æ–ª—Ç (–ê—Ä–±–∞–ª–µ—Ç)", emoji: "üí•üèπ", type: "ranged", minDamage: 12, maxDamage: 20, range: 430, critChance: 0.05, speed: 0.8, projectile: "üí£", effects: [{ type: 'aoe_ranged', radius: 40, selfImmune: false, subDamageFactor: 0.5 }] },
    { name: "–°–≤—è—Ç–æ–π –ú–æ–ª–æ—Ç", emoji: "‚ú®üî®", type: "melee", minDamage: 11, maxDamage: 17, range: 93, critChance: 0.06, speed: 0.88, effects: [] },
    { name: "–¢–µ–º–Ω—ã–π –ö–ª–∏–Ω–æ–∫", emoji: "üåë", type: "melee", minDamage: 10, maxDamage: 16, range: 90, critChance: 0.09, speed: 0.92, effects: [{ type: 'poison', chance: 0.1, dps: 2, duration: 4 }] },
    { name: "–ü—Ä–æ–∫–ª—è—Ç—ã–π –õ—É–∫", emoji: "üíÄüèπ", type: "ranged", minDamage: 8, maxDamage: 13, range: 460, critChance: 0.11, speed: 1.02, projectile: "‚ò†", effects: [{ type: 'root', chance: 0.08, duration: 1 }] },
    { name: "–ö–∞–º–µ–Ω–Ω—ã–π –ú–æ–ª–æ—Ç", emoji: "üóø", type: "melee", minDamage: 14,maxDamage: 23, range: 85, critChance: 0.02, speed: 0.65, effects: [{type:"stun", chance: 0.15, duration: 2}]},
    { name: "–ö–æ—Å—Ç—è–Ω–æ–π –õ—É–∫", emoji: "ü¶¥üèπ", type: "ranged", minDamage: 7, maxDamage: 11, range: 410, critChance: 0.07, speed: 1.0, projectile: "ü¶¥", effects: []},
    { name: "–ò–∑–æ–≥–Ω—É—Ç–∞—è –°–∞–±–ª—è", emoji: "üåô", type: "melee", minDamage: 9, maxDamage: 15, range: 90, critChance: 0.08, speed: 1.05, effects: []},
    { name: "–ú–∞–ª—ã–π –©–∏—Ç (–¥–ª—è —É–¥–∞—Ä–∞)", emoji: "üõ°Ô∏èüí•", type: "melee", minDamage: 5, maxDamage: 9, range: 70, critChance: 0.03, speed: 0.9, effects: [{type:"stun", chance: 0.08, duration: 1}]},
    { name: "–û—Ç—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–π –¢—Ä—É–±–∫–∞", emoji: "üå¨Ô∏èüíß", type: "ranged", minDamage: 2, maxDamage: 4, range: 280, critChance: 0.02, speed: 1.1, projectile: "üí¶", effects: [{type:"poison", chance: 0.3, dps: 4, duration: 3}]},
    { name: "–¶–µ–ø–Ω–æ–π –ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω", emoji: "üîóüåü", type: "melee", minDamage: 10, maxDamage: 18, range: 115, critChance: 0.05, speed: 0.85, effects: [{ type: 'aoe_melee', radius: 50, selfImmune: true }]},
    { name: "–¢—è–∂–µ–ª—ã–π –ê—Ä–±–∞–ª–µ—Ç", emoji: "üèãÔ∏èüèπ", type: "ranged", minDamage: 13, maxDamage: 20, range: 500, critChance: 0.1, speed: 0.75, projectile: "BOLT", effects: []},
    { name: "–ë–æ–µ–≤—ã–µ –ö–æ–≥—Ç–∏", emoji: "Áà™", type: "melee", minDamage: 8, maxDamage: 12, range: 72, critChance: 0.13, speed: 1.18, effects: []},
    { name: "–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ü–æ—Å–æ—Ö", emoji: "üíéüåø", type: "ranged", minDamage: 11, maxDamage: 17, range: 480, critChance: 0.07, speed: 0.93, projectile: "üí†", effects: [{type:"slow", chance: 0.18, factor: 0.35, duration: 2}]},
    { name: "–ñ–µ–ª–µ–∑–Ω–∞—è –ü–∞–ª–∏—Ü–∞", emoji: "üî©üèè", type: "melee", minDamage: 12, maxDamage: 19, range: 82, critChance: 0.04, speed: 0.8, effects: [{type:"stun", chance: 0.11, duration: 1}]},
    { name: "–û—Ö–æ—Ç–Ω–∏—á—å–µ –ö–æ–ø—å–µ", emoji: "üå≤üî±", type: "ranged", minDamage: 9, maxDamage: 14, range: 320, critChance: 0.09, speed: 0.97, projectile: "‚Üë", effects: []},
    { name: "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –©–∏—Ç (–∞—Ç–∞–∫–∞)", emoji: "ü™µüõ°Ô∏è", type: "melee", minDamage: 4, maxDamage: 7, range: 65, critChance: 0.01, speed: 0.85, effects: []},
    { name: "–ú–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –¢–æ–ø–æ—Ä—ã", emoji: "ü™ìüí®", type: "ranged", minDamage: 8, maxDamage: 14, range: 290, critChance: 0.08, speed: 0.9, projectile: "AXE", effects: []},
    { name: "–Ø–¥–æ–≤–∏—Ç—ã–π –ö–Ω—É—Ç", emoji: "üêç‚õìÔ∏è", type: "melee", minDamage: 7, maxDamage: 11, range: 135, critChance: 0.06, speed: 1.05, effects: [{type: "poison", chance: 0.25, dps: 2, duration: 4}]},
    { name: "–°–≤—è—â–µ–Ω–Ω–∞—è –ö–Ω–∏–≥–∞ (—É–¥–∞—Ä)", emoji: "üìñüí•", type: "melee", minDamage: 6, maxDamage: 10, range: 75, critChance: 0.02, speed: 0.9, effects: [{type: "stun", chance: 0.1, duration: 1}, {type: "slow", chance: 0.1, factor: 0.2, duration: 2}]},
    { name: "–ß–∞–∫—Ä–∞–º", emoji: "üíø", type: "ranged", minDamage: 9, maxDamage: 13, range: 360, critChance: 0.12, speed: 1.1, projectile: "üîÑ", effects: []},
    { name: "–ö–∏—Å—Ç–µ–Ω—å", emoji: "üí£‚õìÔ∏è", type: "melee", minDamage: 11, maxDamage: 17, range: 100, critChance: 0.05, speed: 0.88, effects: [{type: "stun", chance: 0.12, duration: 1}]},
    { name: "–ü–æ—Å–æ—Ö –ü—Ä–∏–∑—ã–≤–∞—Ç–µ–ª—è (—Å–ª–∞–±—ã–π —É–¥–∞—Ä)", emoji: "üëªüåø", type: "melee", minDamage: 5, maxDamage: 8, range: 80, critChance: 0.01, speed: 0.95, effects: []},
    { name: "–¢—Ä–µ–∑—É–±–µ—Ü", emoji: "üåäüî±", type: "melee", minDamage: 12, maxDamage: 19, range: 120, critChance: 0.08, speed: 0.92, effects: []},
    { name: "–û—Ç—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –®–∏–ø—ã (–ª–æ–≤—É—à–∫–∞)", emoji: "üåµüíß", type: "melee", minDamage: 4, maxDamage: 7, range: 70, critChance: 0.03, speed: 1.0, effects: [{type:"poison", chance: 0.4, dps: 3, duration: 2}]},
    { name: "–ë—É–º–µ—Ä–∞–Ω–≥", emoji: "‚Ü©Ô∏è", type: "ranged", minDamage: 7, maxDamage: 12, range: 330, critChance: 0.07, speed: 1.0, projectile: "üîÑ", effects: []},
    { name: "–ë–æ–ª–∞—Å", emoji: "‚û∞", type: "ranged", minDamage: 3, maxDamage: 6, range: 280, critChance: 0.02, speed: 0.9, projectile: "‚ûø", effects: [{type: "root", chance: 0.25, duration: 2}]},
    { name: "–¢—è–∂–µ–ª–∞—è –¶–µ–ø—å", emoji: "üîó‚õìÔ∏è", type: "melee", minDamage: 10, maxDamage: 16, range: 110, critChance: 0.04, speed: 0.8, effects: [{type:"slow", chance: 0.15, factor: 0.4, duration: 1}]},
    { name: "–û—Å–∞–¥–Ω—ã–π –õ—É–∫", emoji: "üè∞üèπ", type: "ranged", minDamage: 14, maxDamage: 22, range: 550, critChance: 0.05, speed: 0.65, projectile: "‚ù±‚ù±‚ù±", effects: []},
    { name: "–†–∏—Ç—É–∞–ª—å–Ω—ã–π –ö–∏–Ω–∂–∞–ª", emoji: "ü©∏üó°Ô∏è", type: "melee", minDamage: 8, maxDamage: 13, range: 77, critChance: 0.1, speed: 1.1, effects: [{type: "lifesteal", chance: 0.1, percent: 0.15}]},
    { name: "–õ–µ–¥—è–Ω—ã–µ –û—Å–∫–æ–ª–∫–∏ (—Å–Ω–∞—Ä—è–¥)", emoji: "‚ùÑÔ∏è‚ú®", type: "ranged", minDamage: 6, maxDamage: 10, range: 400, critChance: 0.08, speed: 1.15, projectile: "‚ùÑ", effects: [{type:"slow", chance: 0.2, factor: 0.3, duration: 2}]},
    { name: "–ì–∞—Ä–ø—É–Ω", emoji: "‚öì", type: "ranged", minDamage: 10, maxDamage: 15, range: 300, critChance: 0.06, speed: 0.8, projectile: "‚öì", effects: [{type: "pull", chance: 0.15, distance: 50}]},
    { name: "–ö–Ω–∏–≥–∞ –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–π (–æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä)", emoji: "üî•üìñ", type: "ranged", minDamage: 9, maxDamage: 16, range: 440, critChance: 0.07, speed: 0.95, projectile: "üî•", effects: [{type: "burn", chance: 0.18, dps: 3, duration: 2}]},
    { name: "–ú–æ–ª–æ—Ç –ó–µ–º–ª–∏", emoji: "üåçüî®", type: "melee", minDamage: 13, maxDamage: 21, range: 92, critChance: 0.03, speed: 0.7, effects: [{type: "aoe_melee", radius: 60, selfImmune: true, subDamageFactor: 0.4}]},
    { name: "–í–µ—Ç—Ä—è–Ω–æ–π –ö–ª–∏–Ω–æ–∫", emoji: "üå¨Ô∏è‚öîÔ∏è", type: "melee", minDamage: 9, maxDamage: 14, range: 95, critChance: 0.09, speed: 1.12, effects: [{type: "push", chance: 0.1, distance: 40}]},
    { name: "–ú–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –ò–≥–ª—ã", emoji: "Èáù", type: "ranged", minDamage: 2, maxDamage: 5, range: 310, critChance: 0.15, speed: 1.35, projectile: "|", effects: [{type: "poison", chance: 0.1, dps: 1, duration: 5}]},
    { name: "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ú–µ—á", emoji: "üí°‚öîÔ∏è", type: "melee", minDamage: 10, maxDamage: 17, range: 90, critChance: 0.07, speed: 1.0, effects: []},
    { name: "–ó–≤—É–∫–æ–≤–æ–π –£–¥–∞—Ä (–ø–æ—Å–æ—Ö)", emoji: "üîäüåø", type: "ranged", minDamage: 8, maxDamage: 12, range: 380, critChance: 0.04, speed: 0.9, projectile: "üé∂", effects: [{type: "stun", chance: 0.08, duration: 1}]},

    // –ü–µ—Ä–≤–∞—è –ø–∞—Ä—Ç–∏—è –Ω–æ–≤—ã—Ö 20 –æ—Ä—É–∂–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ)
    { name: "–ë–æ–µ–≤–æ–π –í–µ–µ—Ä", emoji: "ü™≠", type: "melee", minDamage: 7, maxDamage: 11, range: 90, critChance: 0.06, speed: 1.15, effects: [{ type: 'push', chance: 0.2, distance: 25 }] },
    { name: "–°–µ—Ä–ø", emoji: "ÎÇ´", type: "melee", minDamage: 9, maxDamage: 14, range: 95, critChance: 0.10, speed: 1.0, effects: [{ type: 'lifesteal', chance: 0.05, percent: 0.10 }] },
    { name: "–ö–∞—Ç–∞–Ω–∞", emoji: "üéå", type: "melee", minDamage: 11, maxDamage: 17, range: 100, critChance: 0.12, speed: 1.05, effects: [] },
    { name: "–†–∞–ø–∏—Ä–∞", emoji: "ü§∫", type: "melee", minDamage: 8, maxDamage: 13, range: 105, critChance: 0.18, speed: 1.2, effects: [{ type: 'armor_pierce', chance: 0.1 }] },
    { name: "–ë–æ–µ–≤–∞—è –ö–æ—Å–∞", emoji: "üíÄüî™", type: "melee", minDamage: 14, maxDamage: 22, range: 120, critChance: 0.08, speed: 0.8, effects: [{ type: 'aoe_melee', radius: 60, selfImmune: true }] }, // Changed emoji
    { name: "–ù—É–Ω—á–∞–∫–∏", emoji: "ü•ã", type: "melee", minDamage: 6, maxDamage: 9, range: 80, critChance: 0.05, speed: 1.3, effects: [{ type: 'stun', chance: 0.1, duration: 1 }] },
    { name: "–ê–ª–µ–±–∞—Ä–¥–∞", emoji: "‚ö∞Ô∏è", type: "melee", minDamage: 13, maxDamage: 20, range: 130, critChance: 0.07, speed: 0.85, effects: [] }, // Changed emoji
    { name: "–ö–ª–µ–π–º–æ—Ä", emoji: "‚öîÔ∏è‚¨ÜÔ∏è", type: "melee", minDamage: 16, maxDamage: 26, range: 115, critChance: 0.06, speed: 0.65, effects: [] }, // Changed emoji
    { name: "–ó–∞—â–∏—Ç–Ω—ã–π –ë–∞–≥–æ—Ä", emoji: "‚öìüé£", type: "melee", minDamage: 9, maxDamage: 15, range: 125, critChance: 0.04, speed: 0.9, effects: [{ type: 'pull', chance: 0.1, distance: 30 }] }, // Changed emoji
    { name: "–®–∏–ø–∞—Å—Ç–∞—è –ü–µ—Ä—á–∞—Ç–∫–∞", emoji: "üß§üåµ", type: "melee", minDamage: 10, maxDamage: 14, range: 75, critChance: 0.09, speed: 1.1, effects: [{ type: 'poison', chance: 0.08, dps: 2, duration: 2 }] }, // Changed emoji
    { name: "–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –õ—É–∫", emoji: "üéØüèπ", type: "ranged", minDamage: 10, maxDamage: 15, range: 460, critChance: 0.10, speed: 1.0, projectile: "‚û∂", effects: [] },
    { name: "–ú–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –î—Ä–æ—Ç–∏–∫–∏ (–°–ª–æ—É)", emoji: "üéØ‚ùÑÔ∏è", type: "ranged", minDamage: 4, maxDamage: 7, range: 350, critChance: 0.12, speed: 1.25, projectile: "‚Üí", effects: [{ type: 'slow', chance: 0.15, factor: 0.4, duration: 2 }] },
    { name: "–û–≥–Ω–µ–Ω–Ω—ã–µ –°—Ç—Ä–µ–ª—ã", emoji: "üî•üèπ", type: "ranged", minDamage: 8, maxDamage: 13, range: 430, critChance: 0.07, speed: 1.05, projectile: "‚ûπ", effects: [{ type: 'burn', chance: 0.25, dps: 3, duration: 3 }] },
    { name: "–¢—è–∂–µ–ª–∞—è –ü—Ä–∞—â–∞ (–°—Ç–∞–Ω)", emoji: "üèãÔ∏èüåÄ", type: "ranged", minDamage: 9, maxDamage: 16, range: 380, critChance: 0.04, speed: 0.9, projectile: "‚¨§", effects: [{ type: 'stun', chance: 0.1, duration: 1 }] },
    { name: "–°–∞–º–æ—Å—Ç—Ä–µ–ª", emoji: "‚öôÔ∏èüèπ", type: "ranged", minDamage: 11, maxDamage: 17, range: 480, critChance: 0.08, speed: 0.85, projectile: "BOLT", effects: [] },
    { name: "–õ–µ–¥—è–Ω—ã–µ –î—Ä–æ—Ç–∏–∫–∏ (–†—É—Ç)", emoji: "‚ùÑÔ∏èüéØ", type: "ranged", minDamage: 6, maxDamage: 10, range: 360, critChance: 0.06, speed: 1.1, projectile: "‚ùÑÔ∏è", effects: [{ type: 'root', chance: 0.1, duration: 1.5 }] }, // Changed name slightly
    { name: "–î–ª–∏–Ω–Ω—ã–µ –ú–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –ù–æ–∂–∏", emoji: "üî™üî™üî™", type: "ranged", minDamage: 7, maxDamage: 11, range: 390, critChance: 0.09, speed: 1.15, projectile: "‚àó‚àó", effects: [] },
    { name: "–ö–∏—Å–ª–æ—Ç–Ω—ã–µ –°—Ñ–µ—Ä—ã", emoji: "üß™üü¢", type: "ranged", minDamage: 5, maxDamage: 9, range: 340, critChance: 0.05, speed: 1.0, projectile: "ü¶†", effects: [{ type: 'poison', chance: 0.3, dps: 4, duration: 3 }] },
    { name: "–°–≤–µ—Ç–æ–≤—ã–µ –ë–æ–ª—Ç—ã", emoji: "‚ú®üèπ", type: "ranged", minDamage: 10, maxDamage: 14, range: 500, critChance: 0.11, speed: 0.95, projectile: "‚úß", effects: [] },
    { name: "–†–∏–∫–æ—à–µ—Ç—è—â–∏–π –î–∏—Å–∫", emoji: "üîÑüíø", type: "ranged", minDamage: 8, maxDamage: 13, range: 400, critChance: 0.07, speed: 1.0, projectile: "üíø", effects: [{ type: 'aoe_ranged', radius: 30, selfImmune: true, subDamageFactor: 0.6 }] }, // –£–±—Ä–∞–ª maxBounces, —Ç.–∫. –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

    // --- –ù–û–í–´–ï 20 –û–†–£–ñ–ò–ô (–í–¢–û–†–ê–Ø –ü–ê–†–¢–ò–Ø) ---
    // 10 –ë–ª–∏–∂–Ω–µ–≥–æ –±–æ—è
    { name: "–ö–Ω—É—Ç –£–∫—Ä–æ—Ç–∏—Ç–µ–ª—è", emoji: "ü§†", type: "melee", minDamage: 7, maxDamage: 12, range: 150, critChance: 0.05, speed: 1.1, effects: [{ type: 'pull', chance: 0.1, distance: 40 }] },
    { name: "–¢—è–∂–µ–ª—ã–π –©–∏—Ç (–û–≥–ª—É—à–µ–Ω–∏–µ)", emoji: "üõ°Ô∏èüí´", type: "melee", minDamage: 6, maxDamage: 10, range: 70, critChance: 0.02, speed: 0.8, effects: [{ type: 'stun', chance: 0.2, duration: 1.5 }] },
    { name: "–ú–æ—Ä—Å–∫–æ–π –Ø–∫–æ—Ä—å", emoji: "‚öì", type: "melee", minDamage: 15, maxDamage: 24, range: 90, critChance: 0.03, speed: 0.6, effects: [{ type: 'slow', chance: 0.3, factor: 0.5, duration: 2.5 }] },
    { name: "–ü–∞—Ä–Ω—ã–µ –¢–æ–ø–æ—Ä–∏–∫–∏", emoji: "ü™ìü™ì", type: "melee", minDamage: 9, maxDamage: 15, range: 85, critChance: 0.12, speed: 1.05, effects: [] },
    { name: "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ú–æ–ª–æ—Ç", emoji: "üí°üî®", type: "melee", minDamage: 12, maxDamage: 19, range: 95, critChance: 0.06, speed: 0.8, effects: [{ type: 'aoe_melee', radius: 50, selfImmune: true, subDamageFactor: 0.4 }] },
    { name: "–¢—Ä–æ—Å—Ç—å –§–µ—Ö—Ç–æ–≤–∞–ª—å—â–∏–∫–∞", emoji: "ü¶Ø", type: "melee", minDamage: 8, maxDamage: 12, range: 100, critChance: 0.15, speed: 1.25, effects: [] },
    { name: "–ö—Ä–æ–≤–∞–≤—ã–π –¢–µ—Å–∞–∫", emoji: "ü©∏üî™", type: "melee", minDamage: 13, maxDamage: 20, range: 90, critChance: 0.07, speed: 0.9, effects: [{ type: 'lifesteal', chance: 0.15, percent: 0.20 }] },
    { name: "–õ–µ–¥—è–Ω–∞—è –ì–ª–µ—Ñ–∞", emoji: "‚ùÑÔ∏èüìè", type: "melee", minDamage: 11, maxDamage: 18, range: 130, critChance: 0.08, speed: 0.88, effects: [{ type: 'root', chance: 0.1, duration: 1.5 }] }, // Emoji placeholder
    { name: "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ö–ª–∏–Ω–æ–∫", emoji: "üëª‚öîÔ∏è", type: "melee", minDamage: 10, maxDamage: 16, range: 95, critChance: 0.10, speed: 1.1, effects: [{ type: 'armor_pierce', chance: 0.15}] },
    { name: "–û—Å–∞–¥–Ω—ã–π –¢–∞—Ä–∞–Ω (–º–∏–Ω–∏)", emoji: "ü™µ‚û°Ô∏è", type: "melee", minDamage: 18, maxDamage: 28, range: 80, critChance: 0.02, speed: 0.55, effects: [{ type: 'push', chance: 0.4, distance: 50 }] },

    // 10 –î–∞–ª—å–Ω–µ–≥–æ –±–æ—è
    { name: "–õ—É–∫ –°–æ–∫–æ–ª–∞", emoji: "ü¶Öüèπ", type: "ranged", minDamage: 9, maxDamage: 14, range: 520, critChance: 0.12, speed: 1.1, projectile: "‚û¢‚û¢", effects: [] },
    { name: "–ú–µ—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –ö–æ–ø—å–µ", emoji: "üéØüî±", type: "ranged", minDamage: 12, maxDamage: 19, range: 350, critChance: 0.08, speed: 0.9, projectile: "‚Üë‚Üë", effects: [{ type: 'armor_pierce', chance: 0.1 }] },
    { name: "–†–∞–∑—Ä—ã–≤–Ω—ã–µ –°—Ç—Ä–µ–ª—ã", emoji: "üí•üèπ", type: "ranged", minDamage: 10, maxDamage: 16, range: 440, critChance: 0.06, speed: 1.0, projectile: "‚òÑ", effects: [{ type: 'aoe_ranged', radius: 35, selfImmune: false, subDamageFactor: 0.55 }] },
    { name: "–û—Ç—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –î—Ä–æ—Ç–∏–∫ (–°–∏–ª—å–Ω—ã–π)", emoji: "‚ò†Ô∏èüíß", type: "ranged", minDamage: 3, maxDamage: 6, range: 320, critChance: 0.04, speed: 1.2, projectile: "üíß*", effects: [{ type: 'poison', chance: 0.5, dps: 5, duration: 4 }] },
    { name: "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –†–∞–∫–µ—Ç—ã", emoji: "ü™ÑüöÄ", type: "ranged", minDamage: 7, maxDamage: 11, range: 470, critChance: 0.05, speed: 1.15, projectile: "üöÄ", effects: [{ type: 'burn', chance: 0.15, dps: 2, duration: 3 }] }, // projectile can be multiple
    { name: "–°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–π –ê—Ä–±–∞–ª–µ—Ç", emoji: "üî≠üèπ", type: "ranged", minDamage: 15, maxDamage: 25, range: 650, critChance: 0.20, speed: 0.6, projectile: "BOLT+", effects: [] },
    { name: "–ì–∞—Ä–ø—É–Ω–Ω–∞—è –ü—É—à–∫–∞", emoji: "‚öìüí£", type: "ranged", minDamage: 13, maxDamage: 20, range: 280, critChance: 0.05, speed: 0.7, projectile: "‚öì‚û°Ô∏è", effects: [{ type: 'pull', chance: 0.3, distance: 60 }, {type: 'stun', chance: 0.1, duration: 1}] },
    { name: "–í–∑—Ä—ã–≤—á–∞—Ç–∞—è –°–ª–∏–∑—å", emoji: "ü¶†üí•", type: "ranged", minDamage: 8, maxDamage: 14, range: 300, critChance: 0.03, speed: 0.95, projectile: "ü¶†", effects: [{ type: 'aoe_ranged', radius: 45, selfImmune: false, subDamageFactor: 0.6 }, {type: 'slow', chance: 0.2, factor: 0.4, duration: 2.5}] },
    { name: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –î–∏—Å–∫–∏", emoji: "‚ö°üíø", type: "ranged", minDamage: 9, maxDamage: 15, range: 420, critChance: 0.09, speed: 1.05, projectile: "üíø‚ö°", effects: [{type: 'stun', chance: 0.08, duration: 1}, {type: 'slow', chance: 0.1, factor: 0.25, duration: 2}] },
    { name: "–¢–µ–Ω–µ–≤—ã–µ –ò–≥–ª—ã", emoji: "üåëÈáù", type: "ranged", minDamage: 6, maxDamage: 9, range: 370, critChance: 0.13, speed: 1.3, projectile: "‚Üù", effects: [{type: 'poison', chance: 0.15, dps: 3, duration: 2.5}]}
];

const ELITE_WEAPONS = [
    { name: "–û–≥–Ω–µ–Ω–Ω—ã–π –ö–ª–∏–Ω–æ–∫", emoji: "üî•", type: "melee", minDamage: 20, maxDamage: 30, range: 110, critChance: 0.15, speed: 1, effects: [{ type: 'burn', chance: 0.5, dps: 5, duration: 3 }] },
    { name: "–ì—Ä–æ–º–æ–≤–æ–π –ú–æ–ª–æ—Ç", emoji: "‚ö°", type: "melee", minDamage: 25, maxDamage: 35, range: 100, critChance: 0.1, speed: 0.7, effects: [{ type: 'stun', chance: 0.3, duration: 3 }, { type: 'aoe_melee', radius: 75, selfImmune: true }] },
    { name: "–õ–µ–¥—è–Ω–æ–π –õ—É–∫", emoji: "‚ùÑÔ∏è", type: "ranged", minDamage: 18, maxDamage: 25, range: 520, critChance: 0.12, speed: 1.1, projectile: "‚ùÑÔ∏è", effects: [{ type: 'slow', chance: 0.4, factor: 0.3, duration: 3 }, { type: 'root', chance: 0.1, duration: 2 }] },
    { name: "–ö–ª–∏–Ω–æ–∫ –ë—É—Ä–∏", emoji: "üå™Ô∏è", type: "melee", minDamage: 22, maxDamage: 32, range: 115, critChance: 0.18, speed: 1.05, effects: [{ type: 'aoe_melee', radius: 65, selfImmune: true }, { type: 'slow', chance: 0.25, factor: 0.3, duration: 2 }] },
    { name: "–ü–æ—Å–æ—Ö –ê—Ä—Ö–∏–º–∞–≥–∞", emoji: "üåü", type: "ranged", minDamage: 20, maxDamage: 28, range: 550, critChance: 0.1, speed: 1, projectile: "üå†", effects: [{ type: 'burn', chance: 0.3, dps: 6, duration: 3 }, { type: 'stun', chance: 0.15, duration: 1 }] },
    { name: "–ö–æ—Å–∞ –ñ–Ω–µ—Ü–∞", emoji: "üíÄ", type: "melee", minDamage: 28, maxDamage: 40, range: 120, critChance: 0.2, speed: 0.8, effects: [{ type: 'poison', chance: 0.4, dps: 7, duration: 4 }, {type: 'lifesteal', chance: 0.2, percent: 0.25}] },
    { name: "–ê—Ä–±–∞–ª–µ—Ç –ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—è", emoji: "‚ò£Ô∏è", type: "ranged", minDamage: 25, maxDamage: 35, range: 600, critChance: 0.25, speed: 0.9, projectile: "‚ò£Ô∏è", effects: [{ type: 'root', chance: 0.2, duration: 2 }, {type: 'armor_pierce', chance: 0.3}] },
    { name: "–ú–æ–ª–æ—Ç –¢–∏—Ç–∞–Ω–∞", emoji: "üåã", type: "melee", minDamage: 30, maxDamage: 45, range: 95, critChance: 0.08, speed: 0.6, effects: [{ type: 'stun', chance: 0.4, duration: 3 }, { type: 'aoe_melee', radius: 80, selfImmune: true }, {type: 'burn', chance: 0.2, dps: 4, duration: 2}] },
    { name: "–õ—É–∫ –ó–≤–µ–∑–¥–Ω–æ–≥–æ –û—Ö–æ—Ç–Ω–∏–∫–∞", emoji: "üåå", type: "ranged", minDamage: 20, maxDamage: 30, range: 580, critChance: 0.15, speed: 1.15, projectile: "‚≠ê", effects: [{ type: 'slow', chance: 0.3, factor: 0.25, duration: 3 }, { type: 'burn', chance: 0.2, dps: 5, duration: 2 }] },
    { name: "–ü–∞—Ä–Ω—ã–µ –ö–ª–∏–Ω–∫–∏ –•–∞–æ—Å–∞", emoji: "‚õìÔ∏è", type: "melee", minDamage: 18, maxDamage: 26, range: 125, critChance: 0.16, speed: 1.2, effects: [{ type: 'aoe_melee', radius: 70, selfImmune: true }, { type: 'burn', chance: 0.35, dps: 4, duration: 3 }] },
    { name: "–°–∫–∏–ø–µ—Ç—Ä –ó–∞–±–≤–µ–Ω–∏—è", emoji: "üîÆ", type: "ranged", minDamage: 24, maxDamage: 33, range: 530, critChance: 0.11, speed: 0.95, projectile: "üîÆ", effects: [{ type: 'poison', chance: 0.3, dps: 6, duration: 4 }, { type: 'slow', chance: 0.2, factor: 0.4, duration: 3 }] },
    { name: "–ö–æ–ø—å–µ –î—Ä–∞–∫–æ–Ω–æ–±–æ—Ä—Ü–∞", emoji: "üêâ", type: "melee", minDamage: 26, maxDamage: 38, range: 140, critChance: 0.13, speed: 0.9, effects: [{ type: 'burn', chance: 0.4, dps: 5, duration: 3}] },
    { name: "–†—É–∫–∞–≤–∏—Ü—ã –¢–∏—Ç–∞–Ω–∞", emoji: "üëä", type: "melee", minDamage: 20, maxDamage: 30, range: 80, critChance: 0.1, speed: 1.0, effects: [{type: 'stun', chance: 0.25, duration: 2}]},
    { name: "–õ—É–∫ –®–µ–ø–æ—Ç–∞ –í–µ—Ç—Ä–∞", emoji: "üçÉ", type: "ranged", minDamage: 19, maxDamage: 27, range: 620, critChance: 0.14, speed: 1.2, projectile: "~", effects: [{type: 'poison', chance: 0.2, dps: 4, duration: 3}, {type: 'slow', chance: 0.2, factor: 0.2, duration: 3}]},
    { name: "–°–µ–∫–∏—Ä–∞ –í–∞—Ä–≤–∞—Ä–∞", emoji: "üò°", type: "melee", minDamage: 27, maxDamage: 39, range: 105, critChance: 0.12, speed: 0.75, effects: [{type: 'aoe_melee', radius: 60, selfImmune: true}]},
    { name: "–ü–æ—Å–æ—Ö –ó–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è", emoji: "üß±", type: "ranged", minDamage: 22, maxDamage: 31, range: 500, critChance: 0.09, speed: 0.85, projectile: "üß±", effects: [{type: 'stun', chance: 0.2, duration: 2}, {type: 'root', chance: 0.15, duration: 2}, {type: 'aoe_ranged', radius: 50, selfImmune: false, subDamageFactor: 0.6}]},
    { name: "–ú–µ—á –°–æ–ª–Ω–µ—á–Ω–æ–π –Ø—Ä–æ—Å—Ç–∏", emoji: "‚òÄÔ∏è", type: "melee", minDamage: 24, maxDamage: 34, range: 112, critChance: 0.17, speed: 1.02, effects: [{type: 'burn', chance: 0.5, dps: 6, duration: 3}]}
];

// --- –°–¢–ê–¢–£–°–ù–´–ï –≠–§–§–ï–ö–¢–´ ---
const STATUS_EFFECT_DEFINITIONS = {
    poison: { dps: 0, duration: 0, color: 'var(--poison-color)' },
    stun: { duration: 0, color: 'var(--warning-color)' },
    root: { duration: 0, color: 'var(--root-color)' },
    slow: { factor: 1, duration: 0, color: 'var(--slow-color)' },
    enrage: { damageMultiplier: 1, speedMultiplier: 1, duration: 0, color: 'var(--enrage-color)' },
    burn: { dps: 0, duration: 0, color: 'var(--danger-color)'},
    lifesteal: { percent: 0 },
    pull: { distance: 0 },
    push: { distance: 0 },
    armor_pierce: {},
    oe_generic_status: { duration: 0, onApply: null, onRemove: null, originalValues: {} },
    oe_speed_boost_effect: { originalSpeed: 0, duration: 0, onApply: null, onRemove: null },
    oe_damage_boost_effect: { originalMultiplier: 1, duration: 0, onApply: null, onRemove: null },
    oe_evasion_boost_effect: { originalEvasion: 0, duration: 0, onApply: null, onRemove: null },
    oe_crit_boost_effect: { originalCritChance: 0, duration: 0, onApply: null, onRemove: null },
    oe_lifesteal_aura_effect: { lifestealPercent: 0, duration: 0, onApply: null, onRemove: null },
    oe_thorns_effect: { reflectDamage: 0, duration: 0, onApply: null, onRemove: null },
    oe_vulnerability_effect: { originalTakenMultiplier: 1, duration: 0, onApply: null, onRemove: null },
    oe_slow_aura_effect: { originalSpeed: 0, duration: 0, onApply: null, onRemove: null },
    oe_disarm_effect: { originalMultiplier: 1, duration: 0, onApply: null, onRemove: null },
    oe_confusion_effect: { duration: 0, originalPreferredTarget: '', attacksAffected: 1, onApply: null, onRemove: null },
    oe_silence_effect: { duration: 0 },
    oe_drain_tactical_effect: { duration: 0, originalValue: 0, drainAmount: 1, onApply: null, onRemove: null, intellectTypeToDrain: 'tactical' },
    oe_drain_defense_effect: { duration: 0, originalValue: 0, drainAmount: 1, onApply: null, onRemove: null, intellectTypeToDrain: 'defense' },
    oe_drain_resource_effect: { duration: 0, originalValue: 0, drainAmount: 1, onApply: null, onRemove: null, intellectTypeToDrain: 'resource' },
    oe_drain_spatial_effect: { duration: 0, originalValue: 0, drainAmount: 1, onApply: null, onRemove: null, intellectTypeToDrain: 'spatial' },
    oe_increased_cooldowns_effect: { duration: 0, cooldownMultiplier: 1 },
    oe_invulnerability_effect: { duration: 0, onApply: null, onRemove: null },
    oe_range_boost_effect: { duration: 0, originalRange: 0, onApply: null, onRemove: null },
    oe_crit_defense_effect: { duration: 0, nullifyNextCrit: false, onApply: null, onRemove: null },
    oe_swift_retreat_effect: { duration: 0, isActive: false, originalSpeed: 0, speedBonus:1, healthThreshold:0.2, bonusDurationTicks:0, triggeredThisRound: false, onApply: null, onRemove: null },
    oe_intellect_focus_tactical_effect: { duration: 0, originalTactical: 0, onApply: null, onRemove: null },
    oe_kinetic_barrier_effect: { duration: 0, hitsLeft: 0, damageReduction: 1, originalDamageTakenMultiplier:1, onApply:null, onRemove:null },
    oe_temporal_acceleration_effect: { duration:0, originalCooldownMultiplier:1, onApply:null, onRemove:null },
    oe_bonus_magnet_effect: { duration: 0, originalPickupRadiusFactor: 1, onApply: null, onRemove: null },
    oe_reactive_armor_effect: { duration:0, charges:0, threshold:0, pushDistance:0, onApply:null, onRemove:null },
    oe_weapon_jam_effect: { duration: 0, onApply: null, onRemove: null },
    oe_accuracy_debuff_effect: { duration: 0, originalCritChance: 0, originalRange: 0, isRanged:false, missChance:0.15, onApply: null, onRemove: null },
    oe_health_burn_percent_effect: { duration: 0, dpsPercent: 0, onApply: null, onRemove: null },
    oe_intellect_disrupt_defense_effect: { duration: 0, originalDefense: 0, onApply: null, onRemove: null },
    oe_fumble_effect: { duration: 0, chance: 0, oneTimeUse: true, onApply: null, onRemove: null },
    oe_disorient_movement_effect: { duration: 0, onApply: null, onRemove: null },
    oe_marked_for_death_effect: { duration: 0, originalTakenMultiplier: 1, onApply: null, onRemove: null },
    oe_shared_pain_effect: { duration: 0, percent: 0, onApply: null, onRemove: null },
    oe_sluggish_projectiles_effect: { duration: 0, speedFactor: 1, onApply: null, onRemove: null },
    oe_gravity_well_effect: { duration: 0, radius: 0, strength: 0, x:0, y:0, onApply: null, onRemove: null }
};

// --- –ú–û–î–ò–§–ò–ö–ê–¢–û–†–´ –†–ê–£–ù–î–ê ---
const MODIFIER_CHANCE_PER_ROUND = 0.25;
const roundModifiers = [
    {
        name: "–Ø—Ä–æ—Å—Ç—å –ë–µ—Ä—Å–µ—Ä–∫–∞",
        description: "–í—Å–µ –±–æ–π—Ü—ã –Ω–∞–Ω–æ—Å—è—Ç –Ω–∞ 25% –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞, –Ω–æ –ø–æ–ª—É—á–∞—é—Ç –Ω–∞ 15% –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞.",
        apply: (fighter) => {
            fighter.damageOutputMultiplier = (fighter.damageOutputMultiplier || 1) * 1.25;
            fighter.damageTakenMultiplier = (fighter.damageTakenMultiplier || 1) * 1.15;
        },
        remove: (fighter) => {
            if (fighter && fighter.damageOutputMultiplier) fighter.damageOutputMultiplier /= 1.25;
            if (fighter && fighter.damageTakenMultiplier) fighter.damageTakenMultiplier /= 1.15;
        }
    },
    {
        name: "–ë—ã—Å—Ç—Ä—ã–µ –ù–æ–≥–∏",
        description: "–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –≤—Å–µ—Ö –±–æ–π—Ü–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 30%.",
        apply: (fighter) => { fighter.speed = (fighter.speed || fighter.baseSpeed) * 1.3; },
        remove: (fighter) => { if (fighter && fighter.speed && fighter.baseSpeed) fighter.speed = fighter.baseSpeed; }
    },
    {
        name: "–ì—É—Å—Ç–æ–π –¢—É–º–∞–Ω",
        description: "–î–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –≤—Å–µ—Ö –¥–∞–ª—å–Ω–æ–±–æ–π–Ω—ã—Ö –æ—Ä—É–∂–∏–π —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ 30%.",
        apply: (fighter) => {
            if (fighter.weapon && fighter.weapon.type === 'ranged') fighter.weapon.currentRange = (fighter.weapon.currentRange || fighter.weapon.range) * 0.7;
        },
        remove: (fighter) => {
             if (fighter && fighter.weapon && fighter.weapon.type === 'ranged' && fighter.weapon.range) {
                 fighter.weapon.currentRange = fighter.weapon.range;
             }
        }
    },
    {
        name: "–¶–µ–ª–µ–±–Ω—ã–π –í–æ–∑–¥—É—Ö",
        description: "–í—Å–µ –±–æ–π—Ü—ã –º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç 1 –û–ó –∑–∞ –∏–≥—Ä–æ–≤–æ–π —Ç–∏–∫.",
        applyTick: (fighter) => {
            if (fighter.health < fighter.maxHealth) {
                fighter.health = Math.min(fighter.maxHealth, fighter.health + 1);
            }
        }
    },
    {
        name: "–•—Ä—É–ø–∫–∞—è –ë—Ä–æ–Ω—è",
        description: "–í—Å—è –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–∞—è –±—Ä–æ–Ω—è –∏–º–µ–µ—Ç –Ω–∞ 1 –∑–∞—Ä—è–¥ –º–µ–Ω—å—à–µ.",
    }
];

// --- –ù–ê–ß–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ì–õ–ê–î–ò–ê–¢–û–†–û–í ---
const fightersInitialData = [
     { id: "fighter1", name: "–ê—Ä—Ç–µ–º", image: "images/–ê—Ä—Ç—ë–º.jpg", wins: 0, combatStats: { preferredTargetType: 'closest', caution: 0.02, aggression: 0.98, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}},
     { id: "fighter2", name: "–í–ª–∞–¥", image: "images/–í–ª–∞–¥.jpg", wins: 0, combatStats: { preferredTargetType: 'weakest', caution: 0.04, aggression: 0.95, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}},
     { id: "fighter3", name: "–ì–ª–µ–±", image: "images/–ì–ª–µ–±.jpg", wins: 0, combatStats: { preferredTargetType: 'highest_threat', caution: 0.03, aggression: 0.96, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}},
     { id: "fighter4", name: "–ï–≥–æ—Ä", image: "images/–ï–≥–æ—Ä.jpg", wins: 0, combatStats: { preferredTargetType: 'random', caution: 0.01, aggression: 0.99, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}},
     { id: "fighter5", name: "–§–µ–¥—è", image: "images/–§–µ–¥—è.jpg", wins: 0, combatStats: { preferredTargetType: 'closest', caution: 0.05, aggression: 0.90, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}},
     { id: "fighter6", name: "Anton", image: "images/Anton.jpg", wins: 0, combatStats: { preferredTargetType: 'weakest', caution: 0.06, aggression: 0.88, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}},
     { id: "fighter7", name: "Astik", image: "images/Astik.jpg", wins: 0, combatStats: { preferredTargetType: 'highest_threat', caution: 0.02, aggression: 0.97, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}},
     { id: "fighter8", name: "Ivan", image: "images/Ivan.jpg", wins: 0, combatStats: { preferredTargetType: 'closest', caution: 0.04, aggression: 0.92, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}},
     { id: "fighter9", name: "Karen", image: "images/Karen.jpg", wins: 0, combatStats: { preferredTargetType: 'random', caution: 0.015, aggression: 0.95, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}},
     { id: "fighter10", name: "Wladeo", image: "images/Wladeo.jpg", wins: 0, combatStats: { preferredTargetType: 'weakest', caution: 0.03, aggression: 0.93, learnedGrudges: {}, intellect: { tactical: 1, defense: 1, resource: 1, spatial: 1 }, experience: { tactical: 0, defense: 0, resource: 0, spatial: 0 }, learning: { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] }}}
];

// --- –û–†–ë–ò–¢–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ (–ö–û–ù–°–¢–ê–ù–¢–´) ---
const ORBITAL_EFFECT_ORBIT_RADIUS = 550;
const ORBITAL_EFFECT_SIZE_ON_ARENA = 35;
const ORBITAL_EFFECT_SPEED_FACTOR = 0.0015 * 3 * 900;
const MAX_ORBITAL_EFFECTS_PER_ROUND = 7;
const ORBITAL_EFFECT_PROJECTILE_SPEED_VALUE = 25;
const ORBITAL_EFFECTS_POOL = [
    {
        id: "oe_heal_small", name: "–ú–∞–ª–æ–µ –ò—Å—Ü–µ–ª–µ–Ω–∏–µ", description: "–õ–µ—á–∏—Ç 30 –û–ó", icon: "üíñ", type: "buff", color: "lightgreen",
        action: (target) => { if (target.alive) { target.health = Math.min(target.maxHealth, target.health + 30); logMessage(`<span style="color:lightgreen;">${target.name} –∏—Å—Ü–µ–ª–µ–Ω –Ω–∞ 30 –û–ó –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º!</span>`, "log-bonus"); updateFighterElementOnArena(target); } },
        cooldown: 25000, duration: 0
    },
    {
        id: "oe_temp_shield", name: "–í—Ä–µ–º–µ–Ω–Ω—ã–π –©–∏—Ç", description: "–î–∞–µ—Ç +1 –∑–∞—Ä—è–¥ –±—Ä–æ–Ω–∏ (—Å—Ç–∞–∫–∞–µ—Ç—Å—è)", icon: "üõ°Ô∏è", type: "buff", color: "lightblue",
        action: (target) => { if (target.alive) { if (!target.hasArmor) { target.maxArmorHits = 1; target.armorHits = 1; target.hasArmor = true; } else { target.maxArmorHits = Math.max(target.maxArmorHits + 1, target.armorHits + 1); target.armorHits += 1; } logMessage(`<span style="color:lightblue;">${target.name} –ø–æ–ª—É—á–∞–µ—Ç +1 –∑–∞—Ä—è–¥ –±—Ä–æ–Ω–∏ –æ—Ç –æ—Ä–±–∏—Ç—ã! (–í—Å–µ–≥–æ: ${target.armorHits})</span>`, "log-armor"); updateFighterElementOnArena(target); } },
        cooldown: 40000, duration: 0
    },
    {
        id: "oe_speed_boost", name: "–£—Å–∫–æ—Ä–µ–Ω–∏–µ", description: "–°–∫–æ—Ä–æ—Å—Ç—å +60% –Ω–∞ 6—Å", icon: "üí®", type: "buff", color: "cyan",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_speed_boost_effect', { originalSpeed: target.speed, duration: Math.round(6000 / GAME_SPEED), onApply: (t) => { t.speed *= 1.6; }, onRemove: (t, effectDetails) => { t.speed = effectDetails.originalSpeed; } }); logMessage(`<span style="color:cyan;">${target.name} —É—Å–∫–æ—Ä–µ–Ω –æ—Ä–±–∏—Ç–æ–π!</span>`, "log-effect"); } },
        cooldown: 35000, duration: 6000
    },
    {
        id: "oe_damage_boost", name: "–Ø—Ä–æ—Å—Ç—å", description: "–£—Ä–æ–Ω +35% –Ω–∞ 6—Å", icon: "üí™", type: "buff", color: "orange",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_damage_boost_effect', { originalMultiplier: target.damageOutputMultiplier, duration: Math.round(6000 / GAME_SPEED), onApply: (t) => { t.damageOutputMultiplier = (t.damageOutputMultiplier || 1) * 1.35; }, onRemove: (t, effectDetails) => { t.damageOutputMultiplier = effectDetails.originalMultiplier; } }); logMessage(`<span style="color:orange;">${target.name} –≤ —è—Ä–æ—Å—Ç–∏ –æ—Ç –æ—Ä–±–∏—Ç—ã!</span>`, "log-enrage"); } },
        cooldown: 45000, duration: 6000
    },
    {
        id: "oe_evasion_boost", name: "–õ–æ–≤–∫–æ—Å—Ç—å", description: "–£–∫–ª–æ–Ω–µ–Ω–∏–µ +20% –Ω–∞ 7—Å", icon: "ü§∏", type: "buff", color: "#B3E5FC",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_evasion_boost_effect', { originalEvasion: target.evasionChance, duration: Math.round(7000 / GAME_SPEED), onApply: (t) => { t.evasionChance = Math.min(0.9, (t.evasionChance || 0) + 0.20); }, onRemove: (t, effectDetails) => { t.evasionChance = effectDetails.originalEvasion; } }); logMessage(`<span style="color:#B3E5FC;">${target.name} —Å—Ç–∞–ª –ª–æ–≤—á–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –æ—Ä–±–∏—Ç–µ!</span>`, "log-evasion"); } },
        cooldown: 40000, duration: 7000
    },
    {
        id: "oe_cleanse", name: "–û—á–∏—â–µ–Ω–∏–µ", description: "–°–Ω–∏–º–∞–µ—Ç –¥–æ 2—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤", icon: "‚ú®", type: "buff", color: "white",
        action: (target) => { if (target.alive && target.statusEffects) { for (let i=0; i<2; i++) { const debuffs = Object.keys(target.statusEffects).filter(key => ['poison', 'burn', 'slow', 'root', 'stun', 'oe_slow_aura_effect', 'oe_disarm_effect', 'oe_confusion_effect', 'oe_silence_effect', 'oe_vulnerability_effect', 'oe_drain_tactical_effect', 'oe_drain_defense_effect', 'oe_drain_resource_effect', 'oe_drain_spatial_effect', 'oe_increased_cooldowns_effect', 'oe_weapon_jam_effect', 'oe_accuracy_debuff_effect', 'oe_health_burn_percent_effect', 'oe_intellect_disrupt_defense_effect', 'oe_fumble_effect', 'oe_disorient_movement_effect', 'oe_marked_for_death_effect', 'oe_shared_pain_effect', 'oe_sluggish_projectiles_effect' ].includes(key)); if (debuffs.length > 0) { const randomDebuffKey = debuffs[getRandomInt(0, debuffs.length - 1)]; const effectDetails = target.statusEffects[randomDebuffKey]; if (effectDetails && typeof effectDetails.onRemove === 'function') { effectDetails.onRemove(target, effectDetails); } if (randomDebuffKey === 'slow' && target.baseSpeed) target.speed = target.baseSpeed; delete target.statusEffects[randomDebuffKey]; logMessage(`<span style="color:white;">${target.name} –æ—á–∏—â–µ–Ω –æ—Ç ${randomDebuffKey.replace('_effect','').replace('oe_','')} –æ—Ä–±–∏—Ç–æ–π!</span>`, "log-effect"); updateFighterElementOnArena(target); } else { if (i===0) logMessage(`<span style="color:white;">–û—Ä–±–∏—Ç–∞ –ø—ã—Ç–∞–ª–∞—Å—å –æ—á–∏—Å—Ç–∏—Ç—å ${target.name}, –Ω–æ –Ω–µ—Ç –¥–µ–±–∞—Ñ—Ñ–æ–≤!</span>`, "log-effect"); break; } } } },
        cooldown: 30000, duration: 0
    },
     {
        id: "oe_crit_chance_boost", name: "–¢–æ—á–Ω–æ—Å—Ç—å", description: "–®–∞–Ω—Å –∫—Ä–∏—Ç. —É–¥–∞—Ä–∞ +25% –Ω–∞ 6—Å", icon: "üéØ", type: "buff", color: "gold",
        action: (target) => { if (target.alive && target.weapon) { applyStatusEffect(target, 'oe_crit_boost_effect', { originalCritChance: target.weapon.critChance, duration: Math.round(6000 / GAME_SPEED), onApply: (t) => { if (t.weapon) t.weapon.critChance = Math.min(1, (t.weapon.critChance || 0) + 0.25); }, onRemove: (t, effectDetails) => { if (t.weapon) t.weapon.critChance = effectDetails.originalCritChance; } }); logMessage(`<span style="color:gold;">${target.name} –ø–æ–ª—É—á–∏–ª +25% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç. —É–¥–∞—Ä–∞ –æ—Ç –æ—Ä–±–∏—Ç—ã!</span>`, "log-effect"); } },
        cooldown: 50000, duration: 6000
    },
    {
        id: "oe_lifesteal_aura", name: "–ê—É—Ä–∞ –í–∞–º–ø–∏—Ä–∏–∑–º–∞", description: "12% –≤–∞–º–ø–∏—Ä–∏–∑–º–∞ –Ω–∞ 5—Å", icon: "ü©∏", type: "buff", color: "#E91E63",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_lifesteal_aura_effect', { lifestealPercent: 0.12, duration: Math.round(5000 / GAME_SPEED) }); logMessage(`<span style="color:#E91E63;">${target.name} –æ–∫—Ä—É–∂–µ–Ω –∞—É—Ä–æ–π –≤–∞–º–ø–∏—Ä–∏–∑–º–∞!</span>`, "log-effect"); } },
        cooldown: 50000, duration: 5000
    },
    {
        id: "oe_reflect_small_damage", name: "–®–∏–ø—ã", description: "–û—Ç—Ä–∞–∂–∞–µ—Ç 6 —É—Ä–æ–Ω–∞ –ø—Ä–∏ –∞—Ç–∞–∫–µ –≤ –±–ª–∏–∂–Ω–µ–º –±–æ—é –Ω–∞ 7—Å", icon: "üåµ", type: "buff", color: "#795548",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_thorns_effect', { reflectDamage: 6, duration: Math.round(7000 / GAME_SPEED) }); logMessage(`<span style="color:#795548;">${target.name} –ø–æ–∫—Ä—ã—Ç —à–∏–ø–∞–º–∏ –æ—Ç –æ—Ä–±–∏—Ç—ã!</span>`, "log-effect"); } },
        cooldown: 45000, duration: 7000
    },
    {
        id: "oe_xp_boost", name: "–ü—Ä–∏–ª–∏–≤ –ú—É–¥—Ä–æ—Å—Ç–∏", description: "–î–∞–µ—Ç 60 –æ–ø—ã—Ç–∞ —Å–ª—É—á–∞–π–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É", icon: "üí°", type: "buff", color: "var(--primary-color)",
        action: (target) => { if (target.alive && target.combatStats && target.combatStats.experience && target.combatStats.intellect) { const fighterSessionRef = fightersSessionData.find(fsd => fsd.id === target.id); if (!fighterSessionRef) return; const intellectTypes = ['tactical', 'defense', 'resource', 'spatial']; const randomIntellect = intellectTypes[getRandomInt(0, intellectTypes.length - 1)]; fighterSessionRef.combatStats.experience[randomIntellect] = (fighterSessionRef.combatStats.experience[randomIntellect] || 0) + 60; const expNeeded = getExpToLevelUp(fighterSessionRef.combatStats.intellect[randomIntellect]); if (fighterSessionRef.combatStats.experience[randomIntellect] >= expNeeded && fighterSessionRef.combatStats.intellect[randomIntellect] < MAX_INTELLECT_LEVEL) { fighterSessionRef.combatStats.intellect[randomIntellect]++; fighterSessionRef.combatStats.experience[randomIntellect] -= expNeeded; if (target.combatStats.intellect[randomIntellect] < MAX_INTELLECT_LEVEL) { target.combatStats.intellect[randomIntellect]++; } logMessage(`üß† <span class="log-int-levelup">${target.name} –ø–æ–≤—ã—Å–∏–ª ${randomIntellect} –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–æ ${fighterSessionRef.combatStats.intellect[randomIntellect]}!</span> (–û—Ä–±–∏—Ç–∞)`, "log-int-levelup"); updateFighterIntellectVisuals(target); showIntellectLevelUpSparkle(target); } logMessage(`<span style="color:var(--primary-color);">${target.name} –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–ª–∏–≤ –º—É–¥—Ä–æ—Å—Ç–∏ (${randomIntellect}) –æ—Ç –æ—Ä–±–∏—Ç—ã!</span>`, "log-int-levelup"); updateScoreboardUI(); } },
        cooldown: 55000, duration: 0
    },
    {
        id: "oe_reset_cooldowns", name: "–û–±–Ω—É–ª–µ–Ω–∏–µ –ö–î", description: "–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ö–î –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞", icon: "‚ôªÔ∏è", type: "buff", color: "silver", isPlayerEffect: true,
        action: () => { const activeOrbitalEffectsWithCooldown = activeOrbitalEffects.filter(oe => oe.onCooldownUntil && oe.onCooldownUntil > Date.now() && oe.definition.cooldown > 0); if (activeOrbitalEffectsWithCooldown.length > 0) { const randomEffectInstance = activeOrbitalEffectsWithCooldown[getRandomInt(0, activeOrbitalEffectsWithCooldown.length - 1)]; randomEffectInstance.onCooldownUntil = 0; if (randomEffectInstance.element) randomEffectInstance.element.classList.remove('on-cooldown'); logMessage(`<span style="color:silver;">–ö—É–ª–¥–∞—É–Ω —ç—Ñ—Ñ–µ–∫—Ç–∞ "${randomEffectInstance.definition.name}" —Å–±—Ä–æ—à–µ–Ω –æ—Ä–±–∏—Ç–æ–π!</span>`, "log-effect"); } else { logMessage(`<span style="color:silver;">–û—Ä–±–∏—Ç–∞ –ø—ã—Ç–∞–ª–∞—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫—É–ª–¥–∞—É–Ω, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ö–î!</span>`, "log-effect"); } },
        cooldown: 80000, duration: 0, isUnique: true
    },
    {
        id: "oe_reveal_enemy_weakness", name: "–°–ª–∞–±–æ–µ –ú–µ—Å—Ç–æ –í—Ä–∞–≥–∞", description: "–°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ –ø–æ —Ü–µ–ª–∏ –Ω–∞–Ω–µ—Å–µ—Ç +50% —É—Ä–æ–Ω–∞", icon: "üéØ", type: "buff", color: "#4CAF50",
        action: (attacker) => { if (attacker.alive && attacker.target && attacker.target.alive) { const enemyTarget = attacker.target; applyStatusEffect(enemyTarget, 'oe_vulnerability_effect', { originalTakenMultiplier: enemyTarget.damageTakenMultiplier || 1, duration: Math.round(4500 / GAME_SPEED), oneTimeUse: true, damageBonusFactor: 1.5, onApply: (t, effectDetails) => { t.vulnerabilityBonusNextHitFactor = effectDetails.damageBonusFactor; }, onRemove: (t, effectDetails) => { delete t.vulnerabilityBonusNextHitFactor; } }); logMessage(`<span style="color:#4CAF50;">${attacker.name} –æ–±–Ω–∞—Ä—É–∂–∏–ª —Å–ª–∞–±–æ–µ –º–µ—Å—Ç–æ —É ${enemyTarget.name}! –°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ –±—É–¥–µ—Ç —É—Å–∏–ª–µ–Ω–∞.</span>`, "log-effect"); } },
        cooldown: 45000, duration: 0
    },
    {
        id: "oe_invulnerability_short", name: "–ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å", description: "–ü–æ–ª–Ω–∞—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–∞ 1.8—Å", icon: "‚ú®", type: "buff", color: "gold",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_invulnerability_effect', { duration: Math.round(1800 / GAME_SPEED), onApply: (t) => { t.isInvulnerable = true; }, onRemove: (t) => { t.isInvulnerable = false; } }); logMessage(`<span style="color:gold;">${target.name} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ—É—è–∑–≤–∏–º—ã–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è!</span>`, "log-effect"); } }, cooldown: 70000, duration: 1800
    },
    {
        id: "oe_aoe_heal_pulse", name: "–ò–º–ø—É–ª—å—Å –ñ–∏–∑–Ω–∏", description: "–õ–µ—á–∏—Ç —Ü–µ–ª—å –∏ 1 –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞ –Ω–∞ 25 –û–ó.", icon: "üíû", type: "buff", color: "lightpink",
        action: (target) => { if (target.alive) { const healAmount = 25; target.health = Math.min(target.maxHealth, target.health + healAmount); logMessage(`<span style="color:lightpink;">${target.name} –∏—Å—Ü–µ–ª–µ–Ω –Ω–∞ ${healAmount} –û–ó –∏–º–ø—É–ª—å—Å–æ–º –∂–∏–∑–Ω–∏!</span>`, "log-bonus"); updateFighterElementOnArena(target); const allies = currentFighters.filter(f => f.alive && f.id !== target.id); if (allies.length > 0) { allies.sort((a,b) => getDistance(target,a) - getDistance(target,b)); const closestAlly = allies[0]; closestAlly.health = Math.min(closestAlly.maxHealth, closestAlly.health + healAmount); logMessage(`<span style="color:lightpink;">${closestAlly.name} (—Å–æ—é–∑–Ω–∏–∫) —Ç–∞–∫–∂–µ –∏—Å—Ü–µ–ª–µ–Ω –Ω–∞ ${healAmount} –û–ó!</span>`, "log-bonus"); updateFighterElementOnArena(closestAlly); } } }, cooldown: 50000, duration: 0
    },
    {
        id: "oe_range_boost_ranged", name: "–î–∞–ª—å–Ω–∏–π –í—ã—Å—Ç—Ä–µ–ª", description: "–î–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã +30% –Ω–∞ 7—Å.", icon: "üî≠", type: "buff", color: "skyblue",
        action: (target) => { if (target.alive && target.weapon && target.weapon.type === 'ranged') { applyStatusEffect(target, 'oe_range_boost_effect', { duration: Math.round(7000 / GAME_SPEED), originalRange: target.weapon.currentRange || target.weapon.range, onApply: (t) => { if(t.weapon) t.weapon.currentRange = (t.weapon.currentRange || t.weapon.range) * 1.30; }, onRemove: (t, effectDetails) => { if(t.weapon) t.weapon.currentRange = effectDetails.originalRange; } }); logMessage(`<span style="color:skyblue;">${target.name} —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã!</span>`, "log-effect"); } else if (target.alive) { logMessage(`<span style="color:skyblue;">–û—Ä–±–∏—Ç–∞ –ø—ã—Ç–∞–ª–∞—Å—å —É—Å–∏–ª–∏—Ç—å ${target.name}, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–µ–ª–∫–æ–≤!</span>`, "log-effect"); } }, cooldown: 55000, duration: 7000
    },
    {
        id: "oe_crit_nullification", name: "–ê–Ω—Ç–∏-–ö—Ä–∏—Ç –©–∏—Ç", description: "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–ª–æ—â–∞–µ—Ç —Å–ª–µ–¥. –∫—Ä–∏—Ç. —É–¥–∞—Ä (8—Å).", icon: "üõ°Ô∏è", type: "buff", color: "lightcoral",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_crit_defense_effect', { duration: Math.round(8000 / GAME_SPEED), nullifyNextCrit: true, onApply: (t) => { t.canNullifyCrit = true; }, onRemove: (t) => { t.canNullifyCrit = false; } }); logMessage(`<span style="color:lightcoral;">${target.name} –≥–æ—Ç–æ–≤ –ø–æ–≥–ª–æ—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!</span>`, "log-effect"); } }, cooldown: 65000, duration: 8000
    },
    {
        id: "oe_adrenaline_rush", name: "–ü—Ä–∏–ª–∏–≤ –ê–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞", description: "–°–∫–æ—Ä–æ—Å—Ç—å +120%, –µ—Å–ª–∏ –û–ó < 20% (–Ω–∞ 5—Å, —Ä–∞–∑ –∑–∞ —Ä–∞—É–Ω–¥).", icon: "‚ö°", type: "buff", color: "orangered",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_swift_retreat_effect', { duration: Math.round(20000 / GAME_SPEED), speedBonusFactor: 2.2, healthThresholdPercent: 0.20, activeDurationTicks: Math.round(5000 / GAME_SPEED), isActive: false, originalSpeed: 0, triggeredThisRound: false, }); logMessage(`<span style="color:orangered;">${target.name} –æ—â—É—â–∞–µ—Ç –ø—Ä–∏–ª–∏–≤ –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞! –≠—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –û–ó.</span>`, "log-effect"); } }, cooldown: 70000, duration: 20000
    },
    {
        id: "oe_intellect_surge_tactical", name: "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ì–µ–Ω–∏–π", description: "–í—Ä–µ–º–µ–Ω–Ω–æ +2 –∫ –¢–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –Ω–∞ 12—Å.", icon: "üß†", type: "buff", color: "var(--tactical-int-color)",
        action: (target) => { if (target.alive && target.combatStats && target.combatStats.intellect) { const fighterSessionRef = fightersSessionData.find(fsd => fsd.id === target.id); if (!fighterSessionRef) return; applyStatusEffect(target, 'oe_intellect_focus_tactical_effect', { duration: Math.round(12000 / GAME_SPEED), originalTactical: fighterSessionRef.combatStats.intellect.tactical, onApply: (t) => { const fSRef = fightersSessionData.find(fsd => fsd.id === t.id); if(fSRef) fSRef.combatStats.intellect.tactical = Math.min(MAX_INTELLECT_LEVEL, fSRef.combatStats.intellect.tactical + 2); t.combatStats.intellect.tactical = Math.min(MAX_INTELLECT_LEVEL, t.combatStats.intellect.tactical + 2); updateScoreboardUI(); updateFighterIntellectVisuals(t); }, onRemove: (t, effectDetails) => { const fSRef = fightersSessionData.find(fsd => fsd.id === t.id); if(fSRef) fSRef.combatStats.intellect.tactical = effectDetails.originalTactical; t.combatStats.intellect.tactical = effectDetails.originalTactical; updateScoreboardUI(); updateFighterIntellectVisuals(t); } }); logMessage(`<span style="color:var(--tactical-int-color);">${target.name} –≤—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –≥–µ–Ω–∏–µ–º!</span>`, "log-effect"); } }, cooldown: 60000, duration: 12000
    },
    {
        id: "oe_kinetic_barrier", name: "–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ë–∞—Ä—å–µ—Ä", description: "–°–ª–µ–¥—É—é—â–∏–µ 2 –∞—Ç–∞–∫–∏ –Ω–∞–Ω–µ—Å—É—Ç –Ω–∞ 40% –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞ (–Ω–∞ 10—Å).", icon: "üöß", type: "buff", color: "cadetblue",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_kinetic_barrier_effect', { duration: Math.round(10000 / GAME_SPEED), hitsLeft: 2, damageReductionFactor: 0.60, onApply: (t, effectDetails) => { t.kineticBarrierActive = effectDetails; }, onRemove: (t) => { delete t.kineticBarrierActive; } }); logMessage(`<span style="color:cadetblue;">${target.name} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä!</span>`, "log-effect"); } }, cooldown: 65000, duration: 10000
    },
    {
        id: "oe_temporal_acceleration", name: "–£—Å–∫–æ—Ä–µ–Ω–∏–µ –í—Ä–µ–º–µ–Ω–∏", description: "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π -30% –Ω–∞ 8—Å.", icon: "‚è≥", type: "buff", color: "lightsalmon",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_temporal_acceleration_effect', { duration: Math.round(8000 / GAME_SPEED), originalCooldownMultiplier: target.actionCooldownMultiplier || 1, onApply: (t) => { t.actionCooldownMultiplier = (t.actionCooldownMultiplier || 1) * 0.7; }, onRemove: (t, effectDetails) => { t.actionCooldownMultiplier = effectDetails.originalCooldownMultiplier; } }); logMessage(`<span style="color:lightsalmon;">${target.name} —É—Å–∫–æ—Ä—è–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!</span>`, "log-effect"); } }, cooldown: 70000, duration: 8000
    },
    {
        id: "oe_bonus_attraction_field", name: "–ú–∞–≥–Ω–∏—Ç –ë–æ–Ω—É—Å–æ–≤", description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–¥–∏—É—Å –ø–æ–¥–±–æ—Ä–∞ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ 60% –Ω–∞ 10—Å.", icon: "üß≤", type: "buff", color: "khaki",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_bonus_magnet_effect', { duration: Math.round(10000 / GAME_SPEED), originalPickupRadiusFactor: target.pickupRadiusFactor || 1, onApply: (t) => { t.pickupRadiusFactor = (t.pickupRadiusFactor || 1) * 1.6; }, onRemove: (t, effectDetails) => { t.pickupRadiusFactor = effectDetails.originalPickupRadiusFactor; } }); logMessage(`<span style="color:khaki;">${target.name} –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã!</span>`, "log-effect"); } }, cooldown: 50000, duration: 10000
    },
    {
        id: "oe_reactive_armor_charge", name: "–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ë—Ä–æ–Ω—è", description: "–ü—Ä–∏ —É—Ä–æ–Ω–µ >15 –û–ó, –æ—Ç–±—Ä–æ—Å –≤—Ä–∞–≥–æ–≤ (1 –∑–∞—Ä—è–¥, 10—Å)", icon: "üí•", type: "buff", color: "silver",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_reactive_armor_effect', { duration: Math.round(10000 / GAME_SPEED), charges: 1, threshold: 15, pushDistance: 30, onApply: (t, effectDetails) => { t.reactiveArmorCharge = effectDetails; }, onRemove: (t) => { delete t.reactiveArmorCharge; } }); logMessage(`<span style="color:silver;">${target.name} –∑–∞—Ä—è–∂–∞–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω—É—é –±—Ä–æ–Ω—é!</span>`, "log-effect"); } }, cooldown: 60000, duration: 10000
    },
    {
        id: "oe_damage_small", name: "–ú–∞–ª—ã–π –£—Ä–æ–Ω", description: "–ù–∞–Ω–æ—Å–∏—Ç 24 —É—Ä–æ–Ω–∞", icon: "üí•", type: "debuff", color: "tomato",
        action: (target) => { if (target.alive) applyDamage(target, 24, {name: "–û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π –£–¥–∞—Ä", id: "orbital_effect_damage"}, false, "–æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π —É–¥–∞—Ä"); },
        cooldown: 25000, duration: 0
    },
    {
        id: "oe_slow_aura", name: "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ", description: "–°–∫–æ—Ä–æ—Å—Ç—å -35% –Ω–∞ 6—Å", icon: "üêå", type: "debuff", color: "slategray",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_slow_aura_effect', { originalSpeed: target.speed, duration: Math.round(6000 / GAME_SPEED), onApply: (t) => { t.speed *= 0.65; }, onRemove: (t, effectDetails) => { t.speed = effectDetails.originalSpeed; } }); logMessage(`<span style="color:slategray;">${target.name} –∑–∞–º–µ–¥–ª–µ–Ω –æ—Ä–±–∏—Ç–æ–π!</span>`, "log-effect"); } }, cooldown: 35000, duration: 6000
    },
    {
        id: "oe_disarm_temp", name: "–û—Å–ª–∞–±–ª–µ–Ω–∏–µ", description: "–£—Ä–æ–Ω –æ—Ä—É–∂–∏—è -40% –Ω–∞ 5—Å", icon: "üö´", type: "debuff", color: "darkred",
         action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_disarm_effect', { originalMultiplier: target.damageOutputMultiplier || 1, duration: Math.round(5000 / GAME_SPEED), onApply: (t) => { t.damageOutputMultiplier = (t.damageOutputMultiplier || 1) * 0.6; }, onRemove: (t, effectDetails) => { t.damageOutputMultiplier = effectDetails.originalMultiplier; } }); logMessage(`<span style="color:darkred;">–û—Ä—É–∂–∏–µ ${target.name} –æ—Å–ª–∞–±–ª–µ–Ω–æ –æ—Ä–±–∏—Ç–æ–π!</span>`, "log-effect"); } }, cooldown: 45000, duration: 5000
    },
    {
        id: "oe_root_short", name: "–ö–æ—Ä–Ω–∏", description: "–û–±–µ–∑–¥–≤–∏–∂–∏—Ç—å –Ω–∞ 2.5—Å", icon: "üå≤", type: "debuff", color: "saddlebrown",
        action: (target) => { if (target.alive) applyStatusEffect(target, 'root', { duration: Math.round(2500 / GAME_SPEED) }); },
        cooldown: 40000, duration: 2500
    },
    {
        id: "oe_poison_dot", name: "–Ø–¥", description: "4 —É—Ä–æ–Ω–∞/—Å–µ–∫ –≤ —Ç–µ—á. 6—Å", icon: "üß™", type: "debuff", color: "greenyellow",
        action: (target) => { if (target.alive) applyStatusEffect(target, 'poison', { dps: 4, duration: Math.round(6000 / GAME_SPEED) }); },
        cooldown: 30000, duration: 6000
    },
    {
        id: "oe_instant_kill_rare", name: "–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π –£–¥–∞—Ä", description: "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–±–∏–≤–∞–µ—Ç —Ü–µ–ª—å (–æ—á–µ–Ω—å —Ä–µ–¥–∫–æ!)", icon: "üíÄ", type: "debuff", color: "black",
        action: (target) => { if (target.alive) applyDamage(target, target.health + target.maxHealth + 100, {name: "–û—Ä–±–∏—Ç–∞ –°–º–µ—Ä—Ç–∏", id: "orbital_effect_kill"}, true, "—Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä"); },
        cooldown: 270000, duration: 0, isUnique: true, spawnChanceMultiplier: 0.15
    },
    {
        id: "oe_weapon_swap_random", name: "–°–º–µ–Ω–∞ –û—Ä—É–∂–∏—è", description: "–ú–µ–Ω—è–µ—Ç –æ—Ä—É–∂–∏–µ —Ü–µ–ª–∏ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –±–∞–∑–æ–≤–æ–µ", icon: "üîÑ", type: "debuff", color: "purple",
        action: (target) => { if (target.alive && target.weapon) { const oldWeaponName = target.weapon.name; target.weapon = deepCopy(WEAPONS[getRandomInt(0, WEAPONS.length - 1)]); target.weapon.currentRange = target.weapon.range; logMessage(`<span style="color:purple;">–û—Ä—É–∂–∏–µ ${target.name} (${oldWeaponName}) –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ ${target.weapon.name} –æ—Ä–±–∏—Ç–æ–π!</span>`, "log-effect"); if (target.element) { const weaponEmojiEl = target.element.querySelector('.weapon-emoji'); if (weaponEmojiEl) weaponEmojiEl.textContent = target.weapon.emoji; } updateFighterElementOnArena(target); } }, cooldown: 65000, duration: 0
    },
    {
        id: "oe_confusion", name: "–ó–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ", description: "–¶–µ–ª—å –∞—Ç–∞–∫—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–æ–π—Ü–∞ (–∏–ª–∏ —Å–µ–±—è) —Å–ª–µ–¥. 1-2 –∞—Ç–∞–∫–∞–º–∏ (4—Å)", icon: "‚ùì", type: "debuff", color: "magenta",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_confusion_effect', { duration: Math.round(4000 / GAME_SPEED), originalPreferredTarget: target.combatStats?.preferredTargetType || 'closest', attacksAffected: getRandomInt(1,2), onApply: (t) => { if (t.combatStats) t.combatStats.preferredTargetType = 'random_confusion'; }, onRemove: (t, effectDetails) => { if (t.combatStats) t.combatStats.preferredTargetType = effectDetails.originalPreferredTarget; } }); logMessage(`<span style="color:magenta;">${target.name} –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ –æ—Ç –æ—Ä–±–∏—Ç—ã!</span>`, "log-effect"); } }, cooldown: 55000, duration: 4000
    },
    {
        id: "oe_steal_armor", name: "–†–∞–∑—Ä—É—à–µ–Ω–∏–µ –ë—Ä–æ–Ω–∏", description: "–°–Ω–∏–º–∞–µ—Ç –í–°–Æ –±—Ä–æ–Ω—é —Å —Ü–µ–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å", icon: "üî®", type: "debuff", color: "darkgray",
        action: (target) => { if (target.alive && target.hasArmor) { target.hasArmor = false; target.armorHits = 0; target.maxArmorHits = 0; logMessage(`<span style="color:darkgray;">–ë—Ä–æ–Ω—è ${target.name} —Ä–∞–∑—Ä—É—à–µ–Ω–∞ –æ—Ä–±–∏—Ç–æ–π!</span>`, "log-armor"); updateFighterElementOnArena(target); } else if (target.alive) { logMessage(`<span style="color:darkgray;">–û—Ä–±–∏—Ç–∞ –ø—ã—Ç–∞–ª–∞—Å—å —Ä–∞–∑—Ä—É—à–∏—Ç—å –±—Ä–æ–Ω—é —É ${target.name}, –Ω–æ –µ–µ –Ω–µ—Ç!</span>`, "log-effect"); } }, cooldown: 45000, duration: 0
    },
    {
        id: "oe_silence_short", name: "–ú–æ–ª—á–∞–Ω–∏–µ", description: "–ó–∞–ø—Ä–µ—â–∞–µ—Ç —Å–ø–µ—Ü.—ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ä—É–∂–∏—è –Ω–∞ 4—Å", icon: "üîá", type: "debuff", color: "#607D8B",
        action: (target) => { if (target.alive) applyStatusEffect(target, 'oe_silence_effect', { duration: Math.round(4000 / GAME_SPEED) }); logMessage(`<span style="color:#607D8B;">${target.name} –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü. —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ä—É–∂–∏—è –∏–∑-–∑–∞ –æ—Ä–±–∏—Ç—ã!</span>`, "log-effect"); },
        cooldown: 40000, duration: 4000
    },
    {
        id: "oe_drain_intellect_temp", name: "–û—Ç—É–ø–ª–µ–Ω–∏–µ", description: "–°–Ω–∏–∂–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–∞ 1-2 (min 1) –Ω–∞ 12—Å", icon: "üìâ", type: "debuff", color: "rosybrown",
        action: (target) => { if (target.alive && target.combatStats && target.combatStats.intellect) { const intellectTypes = ['tactical', 'defense', 'resource', 'spatial']; const randomIntellect = intellectTypes[getRandomInt(0, intellectTypes.length - 1)]; const drainAmount = getRandomInt(1,2); const fighterSessionRef = fightersSessionData.find(fsd => fsd.id === target.id); if (!fighterSessionRef) return; if (fighterSessionRef.combatStats.intellect[randomIntellect] > 1) { applyStatusEffect(target, `oe_drain_${randomIntellect}_effect`, { duration: Math.round(12000 / GAME_SPEED), originalValue: fighterSessionRef.combatStats.intellect[randomIntellect], drainAmountVal: drainAmount, intellectTypeToDrain: randomIntellect, onApply: (t, effectDetailsSelf) => { const fSRef = fightersSessionData.find(fsd => fsd.id === t.id); if (fSRef) fSRef.combatStats.intellect[effectDetailsSelf.intellectTypeToDrain] = Math.max(1, fSRef.combatStats.intellect[effectDetailsSelf.intellectTypeToDrain] - effectDetailsSelf.drainAmountVal); t.combatStats.intellect[effectDetailsSelf.intellectTypeToDrain] = Math.max(1, t.combatStats.intellect[effectDetailsSelf.intellectTypeToDrain] - effectDetailsSelf.drainAmountVal); updateScoreboardUI(); updateFighterIntellectVisuals(t); }, onRemove: (t, effectDetailsSelf) => { const fSRef = fightersSessionData.find(fsd => fsd.id === t.id); if (fSRef) fSRef.combatStats.intellect[effectDetailsSelf.intellectTypeToDrain] = effectDetailsSelf.originalValue; t.combatStats.intellect[effectDetailsSelf.intellectTypeToDrain] = effectDetailsSelf.originalValue; updateScoreboardUI(); updateFighterIntellectVisuals(t); } }); logMessage(`<span style="color:rosybrown;">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç (${randomIntellect}) ${target.name} –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–µ–Ω –Ω–∞ ${drainAmount} –æ—Ä–±–∏—Ç–æ–π!</span>`, "log-effect"); } } }, cooldown: 65000, duration: 12000
    },
    {
        id: "oe_force_target_switch", name: "–°–º–µ–Ω–∞ –¶–µ–ª–∏", description: "–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–ª—å —Å–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –¥—Ä—É–≥—É—é", icon: "üîÑ", type: "debuff", color: "teal",
        action: (target) => { if (target.alive && target.target) { const otherTargets = currentFighters.filter(f => f.alive && f.id !== target.id && f.id !== target.target.id); if (otherTargets.length > 0) { const newTarget = otherTargets[getRandomInt(0, otherTargets.length - 1)]; target.target = newTarget; logMessage(`<span style="color:teal;">${target.name} –≤—ã–Ω—É–∂–¥–µ–Ω —Å–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –Ω–∞ ${newTarget.name} –∏–∑-–∑–∞ –æ—Ä–±–∏—Ç—ã!</span>`, "log-effect"); if (getTotalIntellect(target) > 3) logIntellectAction(target, 'spatial', `–º–µ–Ω—è–µ—Ç —Ü–µ–ª—å –∏–∑-–∑–∞ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞`); } } }, cooldown: 60000, duration: 0
    },
    {
        id: "oe_increased_cooldowns_short", name: "–ó–∞—Ç–æ—Ä–º–æ–∂–µ–Ω–Ω–æ—Å—Ç—å", description: "–ö—É–ª–¥–∞—É–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π +25% –Ω–∞ 6—Å", icon: "‚è≥", type: "debuff", color: "chocolate",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_increased_cooldowns_effect', { duration: Math.round(6000 / GAME_SPEED), originalCooldownMultiplier: target.actionCooldownMultiplier || 1, onApply: (t) => { t.actionCooldownMultiplier = (t.actionCooldownMultiplier || 1) * 1.25; }, onRemove: (t, effectDetails) => { t.actionCooldownMultiplier = effectDetails.originalCooldownMultiplier; } }); logMessage(`<span style="color:chocolate;">–î–µ–π—Å—Ç–≤–∏—è ${target.name} –∑–∞–º–µ–¥–ª–µ–Ω—ã –æ—Ä–±–∏—Ç–æ–π!</span>`, "log-effect"); } }, cooldown: 50000, duration: 6000
    },
    {
        id: "oe_weapon_jam_field", name: "–ü–æ–ª–µ –ü–æ–º–µ—Ö", description: "–¶–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å 3—Å.", icon: "üö´", type: "debuff", color: "darkslateblue",
        action: (target) => { if (target.alive) applyStatusEffect(target, 'oe_weapon_jam_effect', { duration: Math.round(3000 / GAME_SPEED) }); logMessage(`<span style="color:darkslateblue;">${target.name} –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏–∑-–∑–∞ –ø–æ–º–µ—Ö!</span>`, "log-effect"); }, cooldown: 60000, duration: 3000
    },
    {
        id: "oe_blinding_flash", name: "–û—Å–ª–µ–ø–ª—è—é—â–∞—è –í—Å–ø—ã—à–∫–∞", description: "–°–Ω–∏–∂–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ –Ω–∞ 30% –∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã –Ω–∞ 25% –Ω–∞ 7—Å.", icon: "üòµ", type: "debuff", color: "lightyellow",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_accuracy_debuff_effect', { duration: Math.round(7000 / GAME_SPEED), originalCritChance: target.weapon?.critChance || 0, originalRange: target.weapon?.currentRange || target.weapon?.range || 0, isRanged: target.weapon?.type === 'ranged', onApply: (t) => { if (t.weapon) { t.weapon.critChance = Math.max(0, (t.weapon.critChance || 0) - 0.30); if (t.weapon.type === 'ranged') t.weapon.currentRange = (t.weapon.currentRange || t.weapon.range) * 0.75; } }, onRemove: (t, effectDetails) => { if (t.weapon) { t.weapon.critChance = effectDetails.originalCritChance; if (effectDetails.isRanged) t.weapon.currentRange = effectDetails.originalRange; } } }); logMessage(`<span style="color:lightyellow;">${target.name} –æ—Å–ª–µ–ø–ª–µ–Ω –≤—Å–ø—ã—à–∫–æ–π!</span>`, "log-effect"); } }, cooldown: 55000, duration: 7000
    },
    {
        id: "oe_corrosive_spores", name: "–ï–¥–∫–∏–µ –°–ø–æ—Ä—ã", description: "–ù–∞–Ω–æ—Å–∏—Ç 2.5% –æ—Ç –º–∞–∫—Å. –û–ó –≤ —Å–µ–∫. –≤ —Ç–µ—á. 6—Å (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –±—Ä–æ–Ω—é).", icon: "üçÑ", type: "debuff", color: "olive",
        action: (target) => { if (target.alive) applyStatusEffect(target, 'oe_health_burn_percent_effect', { dpsPercent: 0.025, duration: Math.round(6000 / GAME_SPEED) }); logMessage(`<span style="color:olive;">${target.name} –∑–∞—Ä–∞–∂–µ–Ω –µ–¥–∫–∏–º–∏ —Å–ø–æ—Ä–∞–º–∏!</span>`, "log-effect"); }, cooldown: 60000, duration: 6000
    },
    {
        id: "oe_intellect_dampener_defense", name: "–ü–æ–¥–∞–≤–∏—Ç–µ–ª—å –ó–∞—â–∏—Ç—ã", description: "–í—Ä–µ–º–µ–Ω–Ω–æ -2 –∫ –ó–∞—â–∏—Ç–Ω–æ–º—É –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –Ω–∞ 12—Å.", icon: "üî©", type: "debuff", color: "var(--defense-int-color)",
        action: (target) => { if (target.alive && target.combatStats && target.combatStats.intellect) { const fighterSessionRef = fightersSessionData.find(fsd => fsd.id === target.id); if (!fighterSessionRef) return; applyStatusEffect(target, 'oe_intellect_disrupt_defense_effect', { duration: Math.round(12000 / GAME_SPEED), originalDefense: fighterSessionRef.combatStats.intellect.defense, onApply: (t) => { const fSRef = fightersSessionData.find(fsd => fsd.id === t.id); if(fSRef) fSRef.combatStats.intellect.defense = Math.max(1, fSRef.combatStats.intellect.defense - 2); t.combatStats.intellect.defense = Math.max(1, t.combatStats.intellect.defense - 2) ; updateScoreboardUI(); updateFighterIntellectVisuals(t); }, onRemove: (t, effectDetails) => { const fSRef = fightersSessionData.find(fsd => fsd.id === t.id); if(fSRef) fSRef.combatStats.intellect.defense = effectDetails.originalDefense; t.combatStats.intellect.defense = effectDetails.originalDefense; updateScoreboardUI(); updateFighterIntellectVisuals(t); } }); logMessage(`<span style="color:var(--defense-int-color);">${target.name} –æ—â—É—â–∞–µ—Ç –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞!</span>`, "log-effect"); } }, cooldown: 65000, duration: 12000
    },
    {
        id: "oe_clumsiness_curse", name: "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –ù–µ—É–∫–ª—é–∂–µ—Å—Ç–∏", description: "–°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ —Å 70% —à–∞–Ω—Å–æ–º –Ω–∞–Ω–µ—Å–µ—Ç 0 —É—Ä–æ–Ω–∞.", icon: "ü§û", type: "debuff", color: "sienna",
        action: (target) => { if (target.alive) applyStatusEffect(target, 'oe_fumble_effect', { duration: Math.round(10000 / GAME_SPEED), chance: 0.70, oneTimeUse: true }); logMessage(`<span style="color:sienna;">${target.name} –ø—Ä–æ–∫–ª—è—Ç –Ω–∞ –Ω–µ—É–∫–ª—é–∂–µ—Å—Ç—å!</span>`, "log-effect"); }, cooldown: 50000, duration: 10000
    },
    {
        id: "oe_random_teleport", name: "–°–ª—É—á–∞–π–Ω—ã–π –¢–µ–ª–µ–ø–æ—Ä—Ç", description: "–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–µ–ª—å –≤ —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –∞—Ä–µ–Ω—ã.", icon: "üåÄ", type: "debuff", color: "mediumpurple",
        action: (target) => { if (target.alive) { target.x = getRandomInt(FIGHTER_WIDTH / 2, ARENA_WIDTH - FIGHTER_WIDTH / 2); target.y = getRandomInt(FIGHTER_HEIGHT / 2, ARENA_HEIGHT - FIGHTER_HEIGHT / 2); updateFighterElementOnArena(target); logMessage(`<span style="color:mediumpurple;">${target.name} –±—ã–ª —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!</span>`, "log-effect"); } }, cooldown: 70000, duration: 0
    },
    {
        id: "oe_fragility_curse", name: "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –•—Ä—É–ø–∫–æ—Å—Ç–∏", description: "–¶–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç +20% —É—Ä–æ–Ω–∞ –æ—Ç –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ 8—Å.", icon: "üíî", type: "debuff", color: "lightcoral",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_marked_for_death_effect', { duration: Math.round(8000 / GAME_SPEED), originalTakenMultiplier: target.damageTakenMultiplier || 1, onApply: (t) => { t.damageTakenMultiplier = (t.damageTakenMultiplier || 1) * 1.20; }, onRemove: (t, effectDetails) => { t.damageTakenMultiplier = effectDetails.originalTakenMultiplier; } }); logMessage(`<span style="color:lightcoral;">${target.name} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö—Ä—É–ø–∫–∏–º –∏ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞!</span>`, "log-effect"); } }, cooldown: 55000, duration: 8000
    },
    {
        id: "oe_parasitic_link", name: "–ü–∞—Ä–∞–∑–∏—Ç–∏—á–µ—Å–∫–∞—è –°–≤—è–∑—å", description: "–í —Ç–µ—á–µ–Ω–∏–µ 6—Å, 25% —É—Ä–æ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ü–µ–ª—å—é, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–º—É –¥—Ä—É–≥–æ–º—É –±–æ–π—Ü—É.", icon: "üîó", type: "debuff", color: "darkgreen",
        action: (target) => { if (target.alive) applyStatusEffect(target, 'oe_shared_pain_effect', { duration: Math.round(6000 / GAME_SPEED), percent: 0.25 }); logMessage(`<span style="color:darkgreen;">${target.name} —Å–≤—è–∑–∞–Ω –ø–∞—Ä–∞–∑–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–≤—è–∑—å—é!</span>`, "log-effect"); }, cooldown: 75000, duration: 6000
    },
    {
        id: "oe_projectile_friction", name: "–¢—Ä–µ–Ω–∏–µ –°–Ω–∞—Ä—è–¥–æ–≤", description: "–°–Ω–∞—Ä—è–¥—ã —Ü–µ–ª–∏ –ª–µ—Ç—è—Ç –Ω–∞ 50% –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ 7—Å.", icon: "üèπ", type: "debuff", color: "dimgray",
        action: (target) => { if (target.alive && target.weapon && target.weapon.type === 'ranged') { applyStatusEffect(target, 'oe_sluggish_projectiles_effect', { duration: Math.round(7000 / GAME_SPEED), originalProjectileSpeedFactor: target.projectileSpeedFactor || 1, onApply: (t) => { t.projectileSpeedFactor = (t.projectileSpeedFactor || 1) * 0.5; }, onRemove: (t, effectDetails) => { t.projectileSpeedFactor = effectDetails.originalProjectileSpeedFactor; } }); logMessage(`<span style="color:dimgray;">–°–Ω–∞—Ä—è–¥—ã ${target.name} –∑–∞–º–µ–¥–ª–µ–Ω—ã!</span>`, "log-effect"); } else if (target.alive) { logMessage(`<span style="color:dimgray;">–û—Ä–±–∏—Ç–∞ –ø—ã—Ç–∞–ª–∞—Å—å –∑–∞–º–µ–¥–ª–∏—Ç—å —Å–Ω–∞—Ä—è–¥—ã ${target.name}, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–µ–ª–∫–æ–≤!</span>`, "log-effect"); } }, cooldown: 60000, duration: 7000
    },
    {
        id: "oe_mini_black_hole", name: "–ú–∏–Ω–∏-–ß–µ—Ä–≤–æ—Ç–æ—á–∏–Ω–∞", description: "–ù–∞ 2.5—Å —Å–æ–∑–¥–∞–µ—Ç –≤ –º–µ—Å—Ç–µ —Ü–µ–ª–∏ —á–µ—Ä–≤–æ—Ç–æ—á–∏–Ω—É, —Å–ª–µ–≥–∫–∞ –ø—Ä–∏—Ç—è–≥–∏–≤–∞—é—â—É—é –í–°–ï–• –±–æ–π—Ü–æ–≤.", icon: "‚ö´", type: "debuff", color: "black",
        action: (target) => { if (target.alive) { applyStatusEffect(target, 'oe_gravity_well_effect', { duration: Math.round(2500 / GAME_SPEED), radius: 150, strength: 0.5, x: target.x, y: target.y, }); logMessage(`<span style="color:black;">–ß–µ—Ä–≤–æ—Ç–æ—á–∏–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —É ${target.name}!</span>`, "log-effect"); } }, cooldown: 80000, duration: 2500
    }
];
