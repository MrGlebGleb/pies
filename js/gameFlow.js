// --- GAME FLOW ---

function startGameAfterSetup() {
    console.log("startGameAfterSetup: Starting the first inter-round phase.");
    isInitialSetupPhase = false;
    isGameOver = false;
    roundCounter = 0;
    firstRoundStarted = false;
    updateScoreboardUI();
    startInterRoundPhase();
}

function startInterRoundPhase() {
    console.log(`Starting Inter-Round Phase for Round ${roundCounter + 1}.`);
    isInterRoundPhase = true;
    roundInProgress = false;
    if (gameLoopInterval) clearInterval(gameLoopInterval); gameLoopInterval = null;
    if (preRoundTimeoutId) clearTimeout(preRoundTimeoutId); preRoundTimeoutId = null;

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è "–ê—Ä–µ–Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤"
    // if (mainTitleEl) mainTitleEl.textContent = `–ê—Ä–µ–Ω–∞ –ü–∏—Ä–æ–∂–∫–æ–≤: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ`;
    if (roundCounterDisplayEl) roundCounterDisplayEl.textContent = (roundCounter + 1).toString();

    let interRoundLogMessages = [];
    fightersSessionData.forEach(fighter => {
        if (!fighter.participatingInGameSession) return;
        if (fighter.economicUpgrades?.passiveIncomeLevel > 0) {
            const incomeUpgrade = ECONOMIC_UPGRADES.passiveIncome;
            const incomeAmount = incomeUpgrade.effect.amount * fighter.economicUpgrades.passiveIncomeLevel;
            fighter.currentGold += incomeAmount;
            interRoundLogMessages.push({ name: fighter.name, msg: `–ø–æ–ª—É—á–∞–µ—Ç ${formatNumberWithCommas(incomeAmount)} –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞.` });
        }
        if (fighter.activePacts && fighter.activePacts.length > 0) {
            fighter.activePacts = fighter.activePacts.filter(pact => {
                if (pact.durationRoundsLeft !== "permanent" && typeof pact.durationRoundsLeft === 'number') {
                    if (pact.durationRoundsLeft === 1) {
                        if (pact.pactId === "miserPact" && ECONOMIC_PACTS.miserPact) {
                            const bonusPercent = ECONOMIC_PACTS.miserPact.effect.bonusPercent || 0;
                            const bonusGold = Math.round(fighter.currentGold * bonusPercent);
                            fighter.currentGold += bonusGold;
                            interRoundLogMessages.push({ name: fighter.name, msg: `–∑–∞–≤–µ—Ä—à–∏–ª –ü–∞–∫—Ç –°–∫—É–ø–æ—Å—Ç–∏! +${formatNumberWithCommas(bonusGold)} –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–∞.`});
                        }
                        logMessage(`–ü–∞–∫—Ç "${ECONOMIC_PACTS[pact.pactId]?.name}" —É ${fighter.name} –∏—Å—Ç–µ–∫.`, "log-effect");
                        return false;
                    }
                    pact.durationRoundsLeft--;
                }
                return true;
            });
        }
    });

    updateScoreboardUI();
    interRoundLogMessages.forEach(logEntry => {
        logMessage(`üí∞ ${logEntry.name} ${logEntry.msg}`, "log-bonus");
    });

    if (nextRoundButtonEl) {
        nextRoundButtonEl.textContent = `–ù–∞—á–∞—Ç—å –†–∞—É–Ω–¥ ${roundCounter + 1}!`;
        nextRoundButtonEl.disabled = false;
        nextRoundButtonEl.style.display = 'inline-block';
    }

    if (arenaEl) arenaEl.innerHTML = '';
    clearOrbitalEffects();
    arenaBonuses.forEach(b => { if (b.element?.parentElement) b.element.remove(); });
    arenaBonuses = [];
    currentFighters = [];
    defeatedFightersOrder = [];
    duelContenders = null;
    activeRoundModifier = null;
    createFighterInstanceNamespace.commonWeaponThisRound = null;

    logMessage(`--- –§–∞–∑–∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–µ—Ä–µ–¥ –†–∞—É–Ω–¥–æ–º ${roundCounter + 1} ---`, "log-round-start");
    logMessage("–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", "log-effect");
    if (roundCounter === 0 && !firstRoundStarted) {
        logMessage(`–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –∫ –ø–µ—Ä–≤–æ–π –±–∏—Ç–≤–µ!`, "log-effect");
    }
}

function prepareAndStartRound() {
    if (roundInProgress || isGameOver || isInitialSetupPhase || !isInterRoundPhase) {
        console.warn("prepareAndStartRound: Cannot start, game/round state conflict."); return;
    }
    console.log(`Preparing and starting Round ${roundCounter + 1}`);

    isInterRoundPhase = false;
    if (fighterManagementOverlayEl && fighterManagementOverlayEl.classList.contains('active')) {
        closeFighterManagementModal();
    }
    if (nextRoundButtonEl) {
        nextRoundButtonEl.disabled = true;
        nextRoundButtonEl.textContent = '–†–∞—É–Ω–¥ –ò–¥–µ—Ç...';
    }

    roundCounter++;
    // –û–±–Ω–æ–≤–ª—è–µ–º title —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —Ç–∞–º –±—ã–ª –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
    document.title = `–ê—Ä–µ–Ω–∞: –†–∞—É–Ω–¥ ${roundCounter}`;
    logMessage(`‚öîÔ∏è –†–∞—É–Ω–¥ ${roundCounter} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ë–æ–π—Ü—ã –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –∞—Ä–µ–Ω—É...`, "log-round-start");
    roundGlobalAchievements = {};
    activeRoundModifier = null;
    if (roundCounter > 0 && Math.random() < MODIFIER_CHANCE_PER_ROUND) {
        activeRoundModifier = roundModifiers[getRandomInt(0, roundModifiers.length - 1)];
        logMessage(`üîÆ –ú–û–î–ò–§–ò–ö–ê–¢–û–† –†–ê–£–ù–î–ê: <span class="log-modifier">${activeRoundModifier.name}</span>`, "log-modifier");
        logMessage(`<i>${activeRoundModifier.description}</i>`, "log-modifier");
    }
    if (roundCounter > 0 && roundCounter % 5 === 0) {
        createFighterInstanceNamespace.commonWeaponThisRound = deepCopy(WEAPONS[getRandomInt(0, WEAPONS.length - 1)]);
        logMessage(`üí• <span class='log-winner'>–°–ø–µ—Ü-—Ä–∞—É–Ω–¥! –í—Å–µ –±–æ–π—Ü—ã –ø–æ–ª—É—á–∞—é—Ç: ${createFighterInstanceNamespace.commonWeaponThisRound.name} ${createFighterInstanceNamespace.commonWeaponThisRound.emoji}</span>`, "log-winner");
    } else { createFighterInstanceNamespace.commonWeaponThisRound = null; }

    if (arenaEl) arenaEl.innerHTML = '';
    clearOrbitalEffects();
    arenaBonuses.forEach(b => { if (b.element?.parentElement) b.element.remove(); });
    arenaBonuses = [];
    defeatedFightersOrder = [];
    duelContenders = null;

    currentFighters = [];
    fightersSessionData.filter(fsd => fsd.participatingInGameSession).forEach(sessionFighter => {
        const fighterInstance = createFighterInstance(sessionFighter);
        if (activeRoundModifier && activeRoundModifier.apply) {
            activeRoundModifier.apply(fighterInstance);
        }
        currentFighters.push(fighterInstance);
    });

    if (currentFighters.length < 2) {
        logMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–π—Ü–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞. –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", "log-kill");
        isGameOver = true; endGame(null, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."); return;
    }
    currentFighters.forEach(fighterInstance => { createFighterElementOnArena(fighterInstance); });
    spawnInitialArenaBonuses();
    spawnInitialOrbitalEffects();
    updateScoreboardUI();

    logMessage("–ë–û–ô –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!", "log-round-start");
    roundInProgress = true; firstRoundStarted = true; lastDamageTimestamp = Date.now(); userScrolledLog = false;
    gameLoopInterval = setInterval(gameTick, GAME_SPEED);
}

function gameTick() {
    if (!roundInProgress || isGameOver || isInitialSetupPhase || isInterRoundPhase || isGuideOpen) {
        return;
    }
    intelliActionLog = {}; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–∞
    const aliveFighters = currentFighters.filter(f => f.alive);

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–∑–∞—Å—Ç–æ–π"
    let inactiveFightersCount = 0;
    let didAnyoneTakeSignificantActionThisTick = false;
    aliveFighters.forEach(f => {
        // –°—á–∏—Ç–∞–µ–º –±–æ–π—Ü–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω –¥–æ–ª–≥–æ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if (f.ticksWithoutAction * GAME_SPEED > STALL_TIMEOUT * 0.75) { // –ü–æ—Ä–æ–≥ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            inactiveFightersCount++;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–µ idle –∏ –Ω–µ reposition)
        if (f.currentAction && f.currentAction.type !== 'idle' && f.currentAction.type !== 'reposition') {
            didAnyoneTakeSignificantActionThisTick = true;
        }
    });

    const noDamageRecently = Date.now() - lastDamageTimestamp > STALL_TIMEOUT;
    // –ï—Å–ª–∏ –≤—Å–µ –∂–∏–≤—ã–µ –±–æ–π—Ü—ã –¥–æ–ª–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã (—Å—Ç–æ—è—Ç –∏–ª–∏ —Ç–æ–ª—å–∫–æ –º–∞–Ω–µ–≤—Ä–∏—Ä—É—é—Ç)
    const allEffectivelyIdle = aliveFighters.length > 0 && inactiveFightersCount === aliveFighters.length;
    // –ï—Å–ª–∏ –Ω–µ—Ç —É—Ä–æ–Ω–∞ –î–û–õ–ì–û –ò–õ–ò (–≤—Å–µ –∂–∏–≤—ã–µ —Å—Ç–æ—è—Ç –ò–õ–ò –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —É–∂–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)
    // –ò –ø—Ä–∏ —ç—Ç–æ–º –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –∂–∏–≤—ã—Ö –±–æ–π—Ü–∞, –∏ —ç—Ç–æ –Ω–µ –¥—É—ç–ª—å
    if (aliveFighters.length > 1 && !duelContenders &&
        ( noDamageRecently ||
          (allEffectivelyIdle && inactiveFightersCount > 0) ||
          (!didAnyoneTakeSignificantActionThisTick && Date.now() - lastDamageTimestamp > STALL_TIMEOUT / 2) // –ï—Å–ª–∏ –Ω–µ—Ç —É—Ä–æ–Ω–∞ –ò –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∫—Ä–æ–º–µ idle/reposition)
        )
       ) {
        let stallReason = "–ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∞—Ä–µ–Ω–µ";
        if (allEffectivelyIdle && aliveFighters.length > 1) { // –£—Å–ª–æ–≤–∏–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∂–∏–≤—à–∏–π
            stallReason = "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–π—Ü—ã –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π";
        } else if (!didAnyoneTakeSignificantActionThisTick && Date.now() - lastDamageTimestamp > STALL_TIMEOUT / 2 && aliveFighters.length > 1) {
            stallReason = "–ë–æ–π—Ü—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞—é—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π";
        } else if (!noDamageRecently) { // –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –≤ –æ–±—â–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ —É—Ä–æ–Ω—É, —Ç–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
             stallReason = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª–Ω—ã–π –∑–∞—Å—Ç–æ–π –ø–æ —É—Ä–æ–Ω—É
        }

        if (stallReason) {
            logMessage(`‚è≥ <span class='log-stall-restart'>${stallReason} —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ! –†–∞—É–Ω–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...</span>`, "log-stall-restart");
            endRound(true); return;
        }
    }


    if (aliveFighters.length <= 1 && roundInProgress) {
        endRound(false); return;
    }

    aliveFighters.forEach(fighterInstance => {
        if (!fighterInstance.alive) return;
        fighterInstance.achievementsTrackers.timeSurvivedThisRound = (fighterInstance.achievementsTrackers.timeSurvivedThisRound || 0) + (GAME_SPEED / 1000);
        if (fighterInstance.actionCooldown > 0) fighterInstance.actionCooldown--;
        processStatusEffects(fighterInstance);
        if (activeRoundModifier?.applyTick) activeRoundModifier.applyTick(fighterInstance);
        if (fighterInstance.alive && fighterInstance.actionCooldown <= 0 && !fighterInstance.statusEffects?.stun) {
            chooseAction(fighterInstance, aliveFighters, arenaBonuses);
            executeAction(fighterInstance);
        }
        updateFighterElementOnArena(fighterInstance);
    });
    manageArenaBonuses();
    updateOrbitalEffectsPosition();

    if (!duelContenders && aliveFighters.length === 2) {
        duelContenders = [...aliveFighters];
        logMessage(`‚öîÔ∏è <span class="log-duel">–î–£–≠–õ–¨!</span> ${duelContenders[0].name} –ø—Ä–æ—Ç–∏–≤ ${duelContenders[1].name}!`, "log-duel");
        duelContenders.forEach(f => { addExperience(f, 'target_priority_success'); f.achievementsTrackers.wonDuel = false; f.achievementsTrackers.enteredDuel = true; if(getTotalIntellect(f) >= 8) logIntellectAction(f, 'tactical', `–≤—Å—Ç—É–ø–∞–µ—Ç –≤ –¥—É—ç–ª—å!`); });
    } else if (duelContenders) {
        const [fighter1, fighter2] = duelContenders;
        if (!fighter1.alive || !fighter2.alive) {
            const duelWinner = fighter1.alive ? fighter1 : (fighter2.alive ? fighter2 : null);
            if (duelWinner) {
                duelWinner.achievementsTrackers.wonDuel = true;
                logMessage(`üëë <span class="log-winner">${duelWinner.name}</span> –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤ –¥—É—ç–ª–∏!`, "log-winner");
                addExperience(duelWinner, 'defeat_dangerous_enemy');
            }
            duelContenders = null;
        }
    }
}

function endRound(isStallRestart = false) {
    if (!roundInProgress && !isStallRestart) { console.warn("endRound called, but round not in progress or not a stall restart."); return; }
    console.log(`Ending Round ${roundCounter}. Stall restart: ${isStallRestart}`);

    if (gameLoopInterval) clearInterval(gameLoopInterval); gameLoopInterval = null;
    roundInProgress = false;

    if (activeRoundModifier && activeRoundModifier.remove) {
        currentFighters.forEach(fInstance => { if (fInstance) activeRoundModifier.remove(fInstance); });
    }
    activeRoundModifier = null;

    if (isStallRestart) {
        logMessage(`üèÅ <span class='log-stall-restart'>–†–∞—É–Ω–¥ ${roundCounter} –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –∑–∞—Å—Ç–æ—è...</span>`, "log-stall-restart");
        currentFighters.forEach(f => { if (f.element) removeFighterElementFromArena(f); });
        currentFighters = [];
        roundCounter--;
        startInterRoundPhase();
        return;
    }

    const aliveFightersAtEnd = currentFighters.filter(f => f.alive);
    let winnerInstance = null;
    let roundPlaces = [];

    if (aliveFightersAtEnd.length === 1) {
        winnerInstance = aliveFightersAtEnd[0];
        roundPlaces.push({ id: winnerInstance.id, place: 1, healthPercent: (winnerInstance.health / winnerInstance.maxHealth) });
        defeatedFightersOrder.slice().reverse().forEach((defeatedId, index) => {
            if (winnerInstance && defeatedId !== winnerInstance.id) {
                roundPlaces.push({ id: defeatedId, place: index + 2, healthPercent: 0 });
            } else if (!winnerInstance) {
                 roundPlaces.push({ id: defeatedId, place: index + 1, healthPercent: 0 });
            }
        });
    } else {
        defeatedFightersOrder.slice().reverse().forEach((defeatedId, index) => {
            roundPlaces.push({ id: defeatedId, place: index + 1, healthPercent: 0 });
        });
        aliveFightersAtEnd.forEach(af => {
            if (!roundPlaces.some(rp => rp.id === af.id)) {
                roundPlaces.unshift({ id: af.id, place: 1, healthPercent: (af.health / af.maxHealth) });
            }
        });
        if (roundPlaces.length > 0 && roundPlaces[0].place === 1) {
            winnerInstance = currentFighters.find(f => f.id === roundPlaces[0].id);
        }
        if (aliveFightersAtEnd.length > 1) logMessage(`üíî –†–∞—É–Ω–¥ ${roundCounter} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∏—á—å–µ–π —Å—Ä–µ–¥–∏ ${aliveFightersAtEnd.map(f=>f.name).join(', ')}!`, "log-winner");
        else if (aliveFightersAtEnd.length === 0) logMessage(`üíî –í—Å–µ –±–æ–π—Ü—ã –ø–∞–ª–∏ –≤ —Ä–∞—É–Ω–¥–µ ${roundCounter}!`, "log-winner");
    }

    if (winnerInstance) {
        const winnerSessData = fightersSessionData.find(f => f.id === winnerInstance.id);
        if (winnerSessData) winnerSessData.winStreak = (winnerSessData.winStreak || 0) + 1;
    }
    fightersSessionData.forEach(f => {
        if (!f.participatingInGameSession) return;
        if (!winnerInstance || f.id !== winnerInstance.id) f.winStreak = 0;
    });

    roundPlaces.forEach(rp => {
        const sessionData = fightersSessionData.find(f => f.id === rp.id);
        if (sessionData && ROUND_REWARDS_GOLD[rp.place]) {
            let prizeMoney = ROUND_REWARDS_GOLD[rp.place];
            if (sessionData.activePacts?.some(p => p.pactId === "bloodPact" && (p.durationRoundsLeft > 0 || p.durationRoundsLeft === "permanent"))) {
                prizeMoney *= (1 + (ECONOMIC_PACTS.bloodPact.effect.prizeBonusPercent || 0));
            }
            const championTitle = sessionData.titles?.find(t => t.titleId === 'champion' && t.durationRoundsLeft > 0);
            if (championTitle) {
                prizeMoney *= (TITLES.champion.effects.prizeGoldMultiplier || 1);
            }
            if (sessionData.winStreak >= DYNAMIC_BALANCE.progressiveTaxThreshold2) {
                prizeMoney *= (1 - DYNAMIC_BALANCE.progressiveTaxPercent2);
            } else if (sessionData.winStreak >= DYNAMIC_BALANCE.progressiveTaxThreshold1) {
                prizeMoney *= (1 - DYNAMIC_BALANCE.progressiveTaxPercent1);
            }
            prizeMoney = Math.round(prizeMoney);
            if (prizeMoney > 0) {
                sessionData.currentGold += prizeMoney;
                logMessage(`üí∞ ${sessionData.name} –ø–æ–ª—É—á–∞–µ—Ç ${formatNumberWithCommas(prizeMoney)} –∑–æ–ª–æ—Ç–∞ –∑–∞ ${rp.place}-–µ –º–µ—Å—Ç–æ!`, "log-bonus");
            }
            if (rp.place === 1 && winnerInstance && sessionData.id === winnerInstance.id) {
                sessionData.wins = (sessionData.wins || 0) + 1;
                logMessage(`üéâ <span class="log-winner">${sessionData.name}</span> –ü–û–ë–ï–ñ–î–ê–ï–¢ –í –†–ê–£–ù–î–ï ${roundCounter}! (–ü–æ–±–µ–¥: ${sessionData.wins}, –°–µ—Ä–∏—è: ${sessionData.winStreak || 1})`, "log-winner");
                const winnerInstFromCurrent = currentFighters.find(f => f.id === sessionData.id);
                if (winnerInstFromCurrent) winnerInstFromCurrent.achievementsTrackers.winsThisRound = 1;
            }
        }
    });

    fightersSessionData.forEach(sessionFighter => {
        if (!sessionFighter.activeBetsThisRound || sessionFighter.activeBetsThisRound.length === 0 || !sessionFighter.participatingInGameSession) return;
        const fighterPlaceEntry = roundPlaces.find(rp => rp.id === sessionFighter.id);
        const fighterPlace = fighterPlaceEntry ? fighterPlaceEntry.place : 0;
        const fighterHealthPercent = fighterPlaceEntry ? fighterPlaceEntry.healthPercent : 0;
        const fighterInstForBet = currentFighters.find(f => f.id === sessionFighter.id);
        let totalBetWinnings = 0;
        sessionFighter.activeBetsThisRound.forEach(bet => {
            const betDef = BET_TYPES[bet.type];
            if (!betDef) return;
            let payout = 0; let wonBet = false;
            switch (bet.type) {
                case 'win': if (fighterPlace === 1) wonBet = true; break;
                case 'second_place': if (fighterPlace === 2) wonBet = true; break;
                case 'third_place': if (fighterPlace === 3) wonBet = true; break;
                case 'survival':
                    const isAliveAtEnd = aliveFightersAtEnd.some(af => af.id === sessionFighter.id);
                    if (isAliveAtEnd || (fighterPlace > 0 && fighterPlace <= 3)) wonBet = true;
                    break;
                case 'kills_1': case 'kills_3':
                    const killsAchieved = fighterInstForBet?.killsThisRound || 0;
                    if (killsAchieved >= betDef.baseKills) {
                        wonBet = true; payout = bet.amount * betDef.payoutMultiplier;
                        if (betDef.perKillMultiplier) {
                            payout += (killsAchieved - betDef.baseKills) * bet.amount * betDef.perKillMultiplier;
                        }
                    } break;
                case 'risky_win_domination':
                    if (fighterPlace === 1 && fighterHealthPercent > (betDef.healthThreshold || 0.75)) {
                        wonBet = true;
                    }
                    break;
            }
            if (wonBet && !payout) { payout = bet.amount * betDef.payoutMultiplier; }
            payout = Math.round(payout);
            if (payout > 0) {
                totalBetWinnings += payout;
                logMessage(`üé∞ –°—Ç–∞–≤–∫–∞ "${betDef.name}" (${formatNumberWithCommas(bet.amount)}üí∞) ${sessionFighter.name} –í–´–ò–ì–†–ê–õ–ê! +${formatNumberWithCommas(payout)}üí∞.`, "log-bonus");
            } else if (bet.type === "risky_win_domination" && !(fighterPlace === 1 && fighterHealthPercent > (betDef.healthThreshold || 0.75))) {
                logMessage(`üé≤ –†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ "${betDef.name}" ${sessionFighter.name} –Ω–µ —Å—ã–≥—Ä–∞–ª–∞.`, "log-damage");
            } else if (!wonBet) {
                logMessage(`üìâ –°—Ç–∞–≤–∫–∞ "${betDef.name}" (${formatNumberWithCommas(bet.amount)}üí∞) ${sessionFighter.name} –Ω–µ —Å—ã–≥—Ä–∞–ª–∞.`, "log-damage");
            }
        });
        sessionFighter.currentGold += totalBetWinnings;
        sessionFighter.activeBetsThisRound = [];
    });

    processEndOfRoundExperienceAndAchievements();

    fightersSessionData.forEach(sf => {
        if (!sf.participatingInGameSession) return;
        const placeEntry = roundPlaces.find(rp => rp.id === sf.id);
        const placeTaken = placeEntry ? placeEntry.place : 0;
        if (placeTaken > 0 && placeTaken <= 3) {
            sf.noPrizeStreak = 0;
        } else {
            sf.noPrizeStreak = (sf.noPrizeStreak || 0) + 1;
            if (sf.noPrizeStreak >= DYNAMIC_BALANCE.badLuckStreakThreshold) {
                sf.currentGold += DYNAMIC_BALANCE.badLuckCompensationGold;
                logMessage(`üí∏ ${sf.name} –ø–æ–ª—É—á–∞–µ—Ç ${formatNumberWithCommas(DYNAMIC_BALANCE.badLuckCompensationGold)}üí∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ (${sf.noPrizeStreak} —Ä. –±–µ–∑ –ø—Ä–∏–∑–æ–≤)!`, "log-bonus");
                sf.noPrizeStreak = 0;
            }
        }
    });

    fightersSessionData.forEach(sf => {
        if (sf.titles && sf.titles.length > 0) {
            sf.titles = sf.titles.filter(title => {
                if (title.durationRoundsLeft !== "permanent") {
                    title.durationRoundsLeft--;
                    if (title.durationRoundsLeft <= 0) {
                        logMessage(`–¢–∏—Ç—É–ª "${TITLES[title.titleId]?.name}" —É ${sf.name} –∏—Å—Ç–µ–∫.`, "log-effect");
                        return false;
                    }
                }
                return true;
            });
        }
    });

    const GAME_WIN_CONDITIONS = { wins: 100, gold: 100000 };
    const gameWinner = fightersSessionData.find(f => f.participatingInGameSession && (f.wins >= GAME_WIN_CONDITIONS.wins || f.currentGold >= GAME_WIN_CONDITIONS.gold ));
    if (gameWinner) {
        isGameOver = true;
        let winReason = "";
        if (gameWinner.wins >= GAME_WIN_CONDITIONS.wins) winReason = `–Ω–∞–±—Ä–∞–≤ ${gameWinner.wins} –ø–æ–±–µ–¥`;
        else if (gameWinner.currentGold >= GAME_WIN_CONDITIONS.gold) winReason = `–Ω–∞–∫–æ–ø–∏–≤ ${formatNumberWithCommas(gameWinner.currentGold)} –∑–æ–ª–æ—Ç–∞`;
        logMessage(`üèÜüèÜüèÜ <span class="log-winner">${gameWinner.name}</span> –°–¢–ê–õ –ê–ë–°–û–õ–Æ–¢–ù–´–ú –ß–ï–ú–ü–ò–û–ù–û–ú –ê–†–ï–ù–´, ${winReason}! üèÜüèÜüèÜ`, "log-winner");
        endGame(gameWinner); return;
    }
    const activePlayersLeft = fightersSessionData.filter(f => f.participatingInGameSession && f.currentGold >= MIN_BET_AMOUNT).length;
    const totalParticipating = fightersSessionData.filter(f => f.participatingInGameSession).length;
    if (totalParticipating >=2 && activePlayersLeft < 2) {
        isGameOver = true;
        const lastSolventPlayer = activePlayersLeft === 1 ? fightersSessionData.find(f => f.participatingInGameSession && f.currentGold >= MIN_BET_AMOUNT) : null;
        if(lastSolventPlayer){
            logMessage(`‚ò†Ô∏è –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—ã –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª–∏—Å—å! <span class="log-winner">${lastSolventPlayer.name}</span> –æ—Å—Ç–∞–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!`, "log-kill");
            endGame(lastSolventPlayer, `${lastSolventPlayer.name} –ø–æ–±–µ–¥–∏–ª –∏–∑-–∑–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö!`);
        } else {
            logMessage(`‚ò†Ô∏è –í—Å–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—ã –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª–∏—Å—å! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.`, "log-kill");
            endGame(null, "–í—Å–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—ã –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª–∏—Å—å!");
        } return;
    }

    if (!isGameOver) {
        preRoundTimeoutId = setTimeout(() => {
            startInterRoundPhase();
        }, NEW_ROUND_DELAY_AFTER_MANAGEMENT * 2.5);
    }
}

function endGame(winnerData = null, customMessage = null) {
    console.log("Game Over.");
    isGameOver = true; roundInProgress = false; isInterRoundPhase = false; isInitialSetupPhase = false;
    if (gameLoopInterval) clearInterval(gameLoopInterval); if (preRoundTimeoutId) clearTimeout(preRoundTimeoutId);
    gameLoopInterval = null; preRoundTimeoutId = null;

    if (nextRoundButtonEl) { nextRoundButtonEl.disabled = true; nextRoundButtonEl.textContent = '–ò–≥—Ä–∞ –û–∫–æ–Ω—á–µ–Ω–∞'; nextRoundButtonEl.style.display = 'none'; }
    if (sessionSetupOverlayEl) sessionSetupOverlayEl.classList.remove('active');
    if (fighterManagementOverlayEl) fighterManagementOverlayEl.classList.remove('active');
    if (guideModalEl && guideModalEl.style.display === 'flex') closeGuide();

    if (gameOverOverlayEl) {
        let titleText = "–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê"; let announcementText = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!";
        if (customMessage) { announcementText = customMessage; }
        else if (winnerData) { titleText = `–ü–û–ë–ï–î–ò–¢–ï–õ–¨ - ${winnerData.name.toUpperCase()}!`; announcementText = `–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú, <span id="game-over-winner-name">${winnerData.name}</span>!`; }
        else { announcementText = "–ù–∏–∫—Ç–æ –Ω–µ —Å–º–æ–≥ –¥–æ—Å—Ç–∏—á—å –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ø–æ–±–µ–¥—ã –≤ —ç—Ç–æ—Ç —Ä–∞–∑."; }
        if (gameOverTitleEl) gameOverTitleEl.textContent = titleText;
        if (gameOverWinnerAnnouncementEl) gameOverWinnerAnnouncementEl.innerHTML = announcementText;
        gameOverOverlayEl.classList.add('active');
    }
    if (restartEntireGameButtonEl) { restartEntireGameButtonEl.onclick = () => { gameOverOverlayEl.classList.remove('active'); resetAndRestartGame(); }; }
    updateScoreboardUI();
}