// --- ARENA BONUSES LOGIC ---

/**
 * –°–ø–∞–≤–Ω–∏—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞.
 */
function spawnInitialArenaBonuses() {
    if (!arenaEl) return;
    const numberOfBonuses = getRandomInt(MIN_INITIAL_BONUSES_PER_ROUND, MAX_INITIAL_BONUSES_PER_ROUND);
    logMessage(`‚ú® –í –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞ –Ω–∞ –∞—Ä–µ–Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è ${numberOfBonuses} –±–æ–Ω—É—Å–æ–≤!`, "log-effect");

    for (let i = 0; i < numberOfBonuses; i++) {
        if (arenaBonuses.length < MAX_ARENA_BONUSES) {
            // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –±–æ–Ω—É—Å–∞ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –Ω–æ —Å –≤–µ—Å–∞–º–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            const bonusTypes = ['health_pack', 'elite_weapon', 'armor_light', 'armor_heavy'];
            // –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞
            const randomType = bonusTypes[getRandomInt(0, bonusTypes.length - 1)];
            spawnArenaBonus(randomType, true); // true - initialSpawn, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –ª–∏–º–∏—Ç–æ–º –≤ manageArenaBonuses —Å—Ä–∞–∑—É
        }
    }
}


/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –∏–≥—Ä–æ–≤–æ–º —Ç–∏–∫–µ.
 */
function manageArenaBonuses() {
    if (arenaBonuses.length >= MAX_ARENA_BONUSES || !roundInProgress) return; // –ù–µ —Å–ø–∞–≤–Ω–∏–º, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∏–ª–∏ —Ä–∞—É–Ω–¥ –Ω–µ –∏–¥–µ—Ç

    const randomChance = Math.random();
    const tickRateFactor = 1000 / GAME_SPEED; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–Ω—Å–æ–≤ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä—ã

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–Ω—Å—ã –∏–∑ constants.js
    if (randomChance < (ELITE_WEAPON_BONUS_CHANCE / tickRateFactor) ) {
        spawnArenaBonus('elite_weapon');
    } else if (randomChance < ((ELITE_WEAPON_BONUS_CHANCE + HEALTH_PACK_BONUS_CHANCE) / tickRateFactor) ) {
        spawnArenaBonus('health_pack');
    } else if (randomChance < ((ELITE_WEAPON_BONUS_CHANCE + HEALTH_PACK_BONUS_CHANCE + ARMOR_PACK_LIGHT_CHANCE) / tickRateFactor) ) {
        spawnArenaBonus('armor_light');
    } else if (randomChance < ((ELITE_WEAPON_BONUS_CHANCE + HEALTH_PACK_BONUS_CHANCE + ARMOR_PACK_LIGHT_CHANCE + ARMOR_PACK_HEAVY_CHANCE) / tickRateFactor) ) {
        spawnArenaBonus('armor_heavy');
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –±–æ–Ω—É—Å –Ω–∞ –∞—Ä–µ–Ω–µ.
 * @param {string} type - –¢–∏–ø –±–æ–Ω—É—Å–∞ ('elite_weapon', 'health_pack', 'armor_light', 'armor_heavy').
 * @param {boolean} [isInitialSpawn=false] - –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–ø–∞–≤–Ω–æ–º (–¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –≤ manageArenaBonuses).
 */
function spawnArenaBonus(type, isInitialSpawn = false) {
    if (!isInitialSpawn && arenaBonuses.length >= MAX_ARENA_BONUSES) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–∏–∫–æ–≤–æ–≥–æ —Å–ø–∞–≤–Ω–∞
    if (!arenaEl) return;

    const bonus = {
        id: `bonus-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,
        type: type,
        x: getRandomInt(30 + FIGHTER_WIDTH, ARENA_WIDTH - 30 - FIGHTER_WIDTH), // –ü–æ–¥–∞–ª—å—à–µ –æ—Ç –∫—Ä–∞–µ–≤ –∏ –æ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –±–æ–π—Ü–æ–≤
        y: getRandomInt(30 + FIGHTER_HEIGHT, ARENA_HEIGHT - 30 - FIGHTER_HEIGHT),
        element: document.createElement('div')
    };
    bonus.element.classList.add('arena-bonus');

    let titleText = "";
    if (type === 'health_pack') {
        bonus.element.classList.add('health-pack');
        bonus.element.textContent = '‚ûï';
        titleText = "–ê–ø—Ç–µ—á–∫–∞ (+50 –û–ó)";
        bonus.value = 50;
    } else if (type === 'elite_weapon') {
        bonus.element.classList.add('elite-weapon-pickup');
        const eliteWeaponSample = ELITE_WEAPONS[getRandomInt(0, ELITE_WEAPONS.length - 1)];
        bonus.element.textContent = eliteWeaponSample.emoji.length > 1 && eliteWeaponSample.emoji.includes("Ô∏è") ? eliteWeaponSample.emoji.substring(0, eliteWeaponSample.emoji.indexOf("Ô∏è")) : eliteWeaponSample.emoji.substring(0,1);
        titleText = `–≠–ª–∏—Ç–Ω–æ–µ –æ—Ä—É–∂–∏–µ: ${eliteWeaponSample.name}`;
        bonus.weapon = deepCopy(eliteWeaponSample);
    } else if (type === 'armor_light') {
        bonus.element.classList.add('armor-pack');
        bonus.element.textContent = 'üõ°Ô∏è';
        titleText = `–õ–µ–≥–∫–∞—è –ë—Ä–æ–Ω—è (${MAX_ARMOR_HITS_LIGHT} –±–ª–æ–∫–∞)`;
        bonus.hits = MAX_ARMOR_HITS_LIGHT;
    } else if (type === 'armor_heavy') {
        bonus.element.classList.add('armor-pack');
        bonus.element.textContent = 'üí†';
        titleText = `–¢—è–∂–µ–ª–∞—è –ë—Ä–æ–Ω—è (${MAX_ARMOR_HITS_HEAVY} –±–ª–æ–∫–∞)`;
        bonus.hits = MAX_ARMOR_HITS_HEAVY;
    }
    bonus.element.title = titleText;

    bonus.element.style.left = `${bonus.x - (bonus.element.offsetWidth || 20) / 2}px`; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –±–æ–Ω—É—Å
    bonus.element.style.top = `${bonus.y - (bonus.element.offsetHeight || 20) / 2}px`;
    arenaEl.appendChild(bonus.element);
    arenaBonuses.push(bonus);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–±–æ—Ä –±–æ–Ω—É—Å–∞ –±–æ–π—Ü–æ–º.
 * @param {object} fighterInstance - –ò–Ω—Å—Ç–∞–Ω—Å –±–æ–π—Ü–∞, –ø–æ–¥–æ–±—Ä–∞–≤—à–∏–π –±–æ–Ω—É—Å.
 * @param {object} bonus - –û–±—ä–µ–∫—Ç –±–æ–Ω—É—Å–∞.
 */
function collectBonus(fighterInstance, bonus) {
    if (!fighterInstance || !bonus || !bonus.element || !fighterInstance.alive) return; // –ù–µ –ø–æ–¥–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –±–æ–µ—Ü –º–µ—Ä—Ç–≤

    logIntellectAction(fighterInstance, 'resource', `–ø–æ–¥–±–∏—Ä–∞–µ—Ç ${bonus.element.title.split(':')[0]}`);
    addExperience(fighterInstance, 'pickup_bonus');
    fighterInstance.achievementsTrackers.bonusesCollectedThisRound = (fighterInstance.achievementsTrackers.bonusesCollectedThisRound || 0) + 1;

    showPickupAura(fighterInstance, bonus.type);

    if (bonus.type === 'health_pack' && bonus.value) {
        fighterInstance.health = Math.min(fighterInstance.maxHealth, fighterInstance.health + bonus.value);
        logMessage(`${fighterInstance.name} <span class="log-bonus">–∏—Å—Ü–µ–ª—è–µ—Ç—Å—è –Ω–∞ ${bonus.value} –û–ó</span> –æ—Ç –∞–ø—Ç–µ—á–∫–∏!`, "log-bonus");
    } else if (bonus.type === 'elite_weapon' && bonus.weapon) {
        fighterInstance.weapon = deepCopy(bonus.weapon);
        fighterInstance.weapon.currentRange = fighterInstance.weapon.range; // –°–±—Ä–æ—Å –¥–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ –±–∞–∑–æ–≤–æ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ä—É–∂–∏—è
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —É—Ä–æ–Ω–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏, –±–æ–Ω—É—Å—ã –∫—Ä–∏—Ç–∞ –∫ –Ω–æ–≤–æ–º—É –æ—Ä—É–∂–∏—é
        const roundPermStats = fighterInstance.permanentStatsAppliedToRound;
        if (roundPermStats) {
            fighterInstance.weapon.minDamage = Math.round((fighterInstance.weapon.minDamage || 0) * (roundPermStats.baseDamageMultiplier || 1));
            fighterInstance.weapon.maxDamage = Math.round((fighterInstance.weapon.maxDamage || 0) * (roundPermStats.baseDamageMultiplier || 1));
            fighterInstance.weapon.critChance = (fighterInstance.weapon.critChance || 0) + (roundPermStats.critChanceBonus || 0);
            fighterInstance.weapon.speed = (fighterInstance.weapon.speed || 1) * (roundPermStats.attackSpeedMultiplier || 1);
            fighterInstance.weapon.critChance = Math.max(0, Math.min(1, fighterInstance.weapon.critChance || 0));
        }

        logMessage(`${fighterInstance.name} <span class="log-elite-weapon">–ø–æ–¥–±–∏—Ä–∞–µ—Ç –≠–ª–∏—Ç–Ω–æ–µ –û—Ä—É–∂–∏–µ: ${fighterInstance.weapon.name} ${fighterInstance.weapon.emoji}</span>!`, "log-elite-weapon");
        if (fighterInstance.element) {
            const weaponEmojiEl = fighterInstance.element.querySelector('.weapon-emoji');
            if (weaponEmojiEl) weaponEmojiEl.textContent = fighterInstance.weapon.emoji;
        }
    } else if ((bonus.type === 'armor_light' || bonus.type === 'armor_heavy') && bonus.hits) {
        let armorHitsToAdd = bonus.hits;
        if (activeRoundModifier && activeRoundModifier.name === "–•—Ä—É–ø–∫–∞—è –ë—Ä–æ–Ω—è") {
            armorHitsToAdd = Math.max(0, armorHitsToAdd - 1);
            if (armorHitsToAdd < bonus.hits) {
                 logMessage(`–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä "–•—Ä—É–ø–∫–∞—è –ë—Ä–æ–Ω—è" —É–º–µ–Ω—å—à–∞–µ—Ç –ø—Ä–æ—á–Ω–æ—Å—Ç—å –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–π –±—Ä–æ–Ω–∏ –¥–ª—è ${fighterInstance.name}!`, "log-modifier");
            }
        }
        if (armorHitsToAdd > 0) {
            fighterInstance.armorHits = (fighterInstance.armorHits || 0) + armorHitsToAdd;
            fighterInstance.maxArmorHits = Math.max(fighterInstance.maxArmorHits || 0, fighterInstance.armorHits);
            fighterInstance.hasArmor = fighterInstance.armorHits > 0;
            logMessage(`${fighterInstance.name} <span class="log-armor">–Ω–∞—Ö–æ–¥–∏—Ç –±—Ä–æ–Ω—é (${bonus.element.title.split('(')[0].trim()})</span>! (–í—Å–µ–≥–æ: ${fighterInstance.armorHits} –±–ª–æ–∫–æ–≤)`, "log-armor");
        } else {
            logMessage(`${fighterInstance.name} –ø—ã—Ç–∞–ª—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å –±—Ä–æ–Ω—é, –Ω–æ "–•—Ä—É–ø–∫–∞—è –ë—Ä–æ–Ω—è" —É–Ω–∏—á—Ç–æ–∂–∏–ª–∞ –µ–µ!`, "log-modifier");
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ê–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –±–æ–Ω—É—Å—ã"
    const targetFighterData = fightersSessionData.find(f => f.id === fighterInstance.id);
    if (targetFighterData?.permanentStats?.bonusDamageOnPickup > 0) {
        const allergyDamage = targetFighterData.permanentStats.bonusDamageOnPickup;
        logMessage(`${fighterInstance.name} <span class="log-damage">–ø–æ–ª—É—á–∞–µ—Ç ${allergyDamage} —É—Ä–æ–Ω–∞</span> –æ—Ç –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –±–æ–Ω—É—Å—ã!`, "log-damage");
        applyDamage(fighterInstance, allergyDamage, {name: "–ê–ª–ª–µ—Ä–≥–∏—è", id:"debuff-allergy"}, false, "–∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –±–æ–Ω—É—Å", true); // true - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω—é
    }

    if (bonus.element.parentElement) {
        bonus.element.remove();
    }
    arenaBonuses = arenaBonuses.filter(b => b.id !== bonus.id);
    updateFighterElementOnArena(fighterInstance);
}