// --- SCOREBOARD LOGIC ---

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –∏–∑ fightersSessionData.
 */
function updateScoreboardUI() {
    if (!scoreboardListEl) {
        console.error("Scoreboard UI: scoreboardListEl is missing!");
        return;
    }
    if (!fightersSessionData || !Array.isArray(fightersSessionData)) {
        console.error("Scoreboard UI: fightersSessionData is invalid!");
        scoreboardListEl.innerHTML = '<li>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤.</li>';
        return;
    }

    scoreboardListEl.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –ø–æ –ø–æ–±–µ–¥–∞–º (desc), –∑–∞—Ç–µ–º –ø–æ –∑–æ–ª–æ—Ç—É (desc)
    const sortedFighters = [...fightersSessionData].sort((a, b) => {
        if ((b.wins || 0) !== (a.wins || 0)) {
            return (b.wins || 0) - (a.wins || 0);
        }
        return (b.currentGold || 0) - (a.currentGold || 0);
    });

    if (sortedFighters.length === 0 && !isInitialSetupPhase) {
        scoreboardListEl.innerHTML = '<li>–ù–µ—Ç –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏.</li>';
        return;
    }

    sortedFighters.forEach(fighterData => {
        const li = document.createElement('li');
        li.classList.add('scoreboard-fighter-entry');
        li.dataset.fighterId = fighterData.id;

        // –ê–≤–∞—Ç–∞—Ä
        const avatarDiv = document.createElement('div');
        avatarDiv.classList.add('sb-fighter-avatar');
        const img = document.createElement('img');
        img.src = fighterData.image;
        img.alt = fighterData.name;
        img.onerror = () => { img.src = 'images/default.png'; };
        avatarDiv.appendChild(img);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ò–º—è –∏ –ó–æ–ª–æ—Ç–æ
        const infoDiv = document.createElement('div');
        infoDiv.classList.add('sb-fighter-info');
        const nameSpan = document.createElement('span');
        nameSpan.classList.add('sb-fighter-name');
        nameSpan.textContent = fighterData.name || "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π";
        const goldSpan = document.createElement('span');
        goldSpan.classList.add('sb-fighter-gold');
        goldSpan.textContent = `üí∞ ${(fighterData.currentGold || 0).toLocaleString()}`;
        infoDiv.appendChild(nameSpan);
        infoDiv.appendChild(goldSpan);

        // –ü–æ–±–µ–¥—ã (–∫—É–±–∫–∏)
        const winsSpan = document.createElement('span');
        winsSpan.classList.add('sb-fighter-wins');
        winsSpan.textContent = 'üèÜ'.repeat(fighterData.wins || 0) || "-"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—á–µ—Ä–∫, –µ—Å–ª–∏ 0 –ø–æ–±–µ–¥

        // –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–æ–≤ (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        const tooltipDiv = document.createElement('div');
        tooltipDiv.classList.add('sb-fighter-intellect-tooltip');
        tooltipDiv.innerHTML = generateFighterTooltipHTML(fighterData); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏

        li.appendChild(avatarDiv);
        li.appendChild(infoDiv);
        li.appendChild(winsSpan);
        li.appendChild(tooltipDiv); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É

        // –î–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –º–µ–∂—Ä–∞—É–Ω–¥–æ–≤–∞—è —Ñ–∞–∑–∞
        if (isInterRoundPhase) {
            li.classList.add('manageable');
            li.addEventListener('click', () => handleScoreboardFighterClick(fighterData.id));
        } else {
            li.classList.remove('manageable');
        }
        scoreboardListEl.appendChild(li);
    });
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞.
 * @param {object} fighterData - –î–∞–Ω–Ω—ã–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞ –∏–∑ fightersSessionData.
 * @returns {string} HTML-—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.
 */
function generateFighterTooltipHTML(fighterData) {
    if (!fighterData) return "<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>";

    const int = fighterData.combatStats?.intellect || { tactical: 1, defense: 1, resource: 1, spatial: 1 };
    const permStats = fighterData.permanentStats || {};

    // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ UPGRADES –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "—É–ª—É—á—à–µ–Ω–æ –Ω–∞ X"
    const baseCritBonus = UPGRADES.critChance.effect.value; // 0.02
    const baseEvasionBonus = UPGRADES.evasion.effect.value; // 0.01

    let html = `<p><strong>${fighterData.name}</strong></p>`;
    html += `<p><span class="int-stat int-tactical">${INTELLECT_SYMBOLS.tactical} ${int.tactical}</span> <span class="int-stat int-defense">${INTELLECT_SYMBOLS.defense} ${int.defense}</span> <span class="int-stat int-resource">${INTELLECT_SYMBOLS.resource} ${int.resource}</span> <span class="int-stat int-spatial">${INTELLECT_SYMBOLS.spatial} ${int.spatial}</span></p>`;
    html += `<hr>`;
    html += `<p>–ú–∞–∫—Å. –û–ó: ${permStats.maxHealth || BASE_HEALTH}</p>`;
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –∫–∞–∫ % –±–æ–Ω—É—Å (1 / –º–Ω–æ–∂–∏—Ç–µ–ª—å)
    const attackSpeedBonusPercent = permStats.attackSpeedMultiplier ? ((1 / permStats.attackSpeedMultiplier - 1) * 100).toFixed(0) : 0;
    html += `<p>–ë–æ–Ω—É—Å —Å–∫–æ—Ä. –∞—Ç–∞–∫–∏: +${attackSpeedBonusPercent}%</p>`;
    html += `<p>–î–æ–ø. —à–∞–Ω—Å –∫—Ä–∏—Ç–∞: +${((permStats.critChanceBonus || 0) * 100).toFixed(0)}%</p>`;
    html += `<p>–ë–æ–Ω—É—Å –∫ —É—Ä–æ–Ω—É: +${(permStats.baseDamageMultiplier ? (permStats.baseDamageMultiplier - 1) * 100 : 0).toFixed(0)}%</p>`;
    html += `<p>–î–æ–ø. —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è: +${((permStats.evasionBonus || 0) * 100).toFixed(0)}%</p>`;
    if (permStats.bonusArmorChargesPerRound > 0) {
        html += `<p>–ë—Ä–æ–Ω—è –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞: ${permStats.bonusArmorChargesPerRound}</p>`;
    }
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö permanentStats, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å

    return html;
}


/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—É –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤.
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞.
 * @param {string} fighterId - ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞.
 */
function handleScoreboardFighterClick(fighterId) {
    if (!isInterRoundPhase) {
        console.log("Scoreboard click: Not in inter-round phase. Management disabled.");
        return;
    }

    const fighterToManage = fightersSessionData.find(f => f.id === fighterId);
    if (!fighterToManage) {
        console.error("Scoreboard click: Fighter data not found for ID:", fighterId);
        return;
    }

    selectedFighterForManagementId = fighterId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ state.js
    console.log(`Scoreboard click: Managing fighter ${fighterToManage.name} (ID: ${fighterId})`);

    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤ fighterManagement.js
    if (typeof openFighterManagementModal === 'function') {
        openFighterManagementModal(fighterToManage);
    } else {
        console.error("handleScoreboardFighterClick: openFighterManagementModal function is not defined.");
        alert("–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–º –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞.");
    }
}

// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–µ—Å–ª–∏ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—ã —É–∂–µ –µ—Å—Ç—å –≤ fightersSessionData)
// –û–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è sessionSetup –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –º–µ–∂—Ä–∞—É–Ω–¥–æ–≤–æ–π —Ñ–∞–∑—ã.
// document.addEventListener('DOMContentLoaded', () => {
//    // updateScoreboardUI(); // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å, –ø—É—Å—Ç—å gameFlow —Ä–µ—à–∞–µ—Ç –∫–æ–≥–¥–∞
// });